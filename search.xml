<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>[translation] AI and its limits</title>
      <link href="/2020/08/27/AI-and-its-limits/"/>
      <url>/2020/08/27/AI-and-its-limits/</url>
      
        <content type="html"><![CDATA[<h2 id="Artificial-intelligence-and-its-limits-人工智能及其局限"><a href="#Artificial-intelligence-and-its-limits-人工智能及其局限" class="headerlink" title="Artificial intelligence and its limits 人工智能及其局限"></a>Artificial intelligence and its limits 人工智能及其局限</h2><h3 id="Reality-check-面对现实"><a href="#Reality-check-面对现实" class="headerlink" title="Reality check 面对现实"></a>Reality check 面对现实</h3><p>After years of hype, an understanding of AI’s limitations is starting to sink in, says Tim Cross<br>本文作者蒂姆·克罗斯（Tim Cross）说，经过多年的热捧，人们开始认识到AI的局限性<br><a id="more"></a><br>IT WILL BE as if the world had created a second China, made not of billions of people and millions of factories, but of algorithms and humming computers. PwC, a professional-services firm, predicts that artificial intelligence (AI) will add $16trn to the global economy by 2030. The total of all activity—from banks and biotech to shops and construction—in the world’s second-largest economy was just $13trn in 2018.</p><p>那就像是世界创造了第二个中国——只不过构成它的不是十几亿人和数百万家工厂，而是算法和嗡嗡作响的计算机。专业服务公司普华永道（PwC）预测，到2030年，人工智能（AI）将为全球经济增加16万亿美元。而全球第二大经济体2018年所有活动的总和——从银行、生物技术到商店和建筑业——也不过13万亿美元。</p><p>PwC’s claim is no outlier. Rival prognosticators at McKinsey put the figure at $13trn. Others go for qualitative drama, rather than quantitative. Sundar Pichai, Google’s boss, has described developments in AI as “more profound than fire or electricity”. Other forecasts see similarly large changes, but less happy ones. Clever computers capable of doing the jobs of radiologists, lorry drivers or warehouse workers might cause a wave of unemployment.</p><p>普华永道的说法并不稀奇。它的竞争对手、麦肯锡的预测者认为，这个数字大概在13万亿美元。其他人则希望从定性而非定量的角度一语惊人。谷歌的老板桑达尔·皮查伊（Sundar Pichai）形容AI的发展“比火或电的影响更深远”。其他预测也描绘了同样宏大的变化，但不那么令人愉快。聪明的计算机能完成放射科医生、货车司机或仓库工人的工作，可能导致一大波失业潮。</p><p>Yet lately doubts have been creeping in about whether today’s AI technology is really as world-changing as it seems. It is running up against limits of one kind or another, and has failed to deliver on some of its proponents’ more grandiose promises.</p><p>不过，今天的AI技术是否真会带来那么翻天覆地的变化？对此的怀疑近来悄悄滋生。AI正在触及这样或那样的极限，也没能兑现它的一些支持者所做的更宏大的承诺。</p><p>There is no question that AI—or, to be precise, machine learning, one of its sub-fields—has made much progress. Computers have become dramatically better at many things they previously struggled with. The excitement began to build in academia in the early 2010s, when new machine-learning techniques led to rapid improvements in tasks such as recognising pictures and manipulating language. From there it spread to business, starting with the internet giants. With vast computing resources and oceans of data, they were well placed to adopt the technology. Modern AI techniques now power search engines and voice assistants, suggest email replies, power the facial-recognition systems that unlock smartphones and police national borders, and underpin the algorithms that try to identify unwelcome posts on social media.</p><p>毫无疑问，人工智能（或者确切地说是机器学习，它的子领域之一）已经取得了显著进展。在诸多以前难以解决的任务上，计算机的表现已大幅改进。2010年代初期，新的机器学习技术推动图像识别和语言处理等任务取得快速改进，学术界开始为之兴奋。之后它开始传入企业界，最先进入了互联网巨头。这些巨头拥有大量计算资源和海量数据，因此有很好的条件来采用这项技术。如今，现代AI技术驱动了搜索引擎和语音助手、电子邮件回复建议、用于解锁智能手机和管控边境的人脸识别系统，以及尝试识别社交媒体上不受欢迎的帖子的算法。Perhaps the highest-profile display of the technology’s potential came in 2016, when a system built by DeepMind, a London-based AI firm owned by Alphabet, Google’s corporate parent, beat one of the world’s best players at Go, an ancient Asian board game. The match was watched by tens of millions; the breakthrough came years, even decades, earlier than AI gurus had expected.</p><p>这项技术最高调地展现自身潜力的一次可能是在2016年。总部位于伦敦的DeepMind是谷歌母公司Alphabet旗下的AI公司，它创建了一个系统，在古老的亚洲棋盘游戏围棋上击败了世界最好的棋手之一。几千万人观看了这场比赛。这项突破比AI大咖们所预期的提前发生了几年甚至几十年。</p><p>As Mr Pichai’s comparison with electricity and fire suggests, machine learning is a general-purpose technology—one capable of affecting entire economies. It excels at recognising patterns in data, and that is useful everywhere. Ornithologists use it to classify birdsong; astronomers to hunt for planets in glimmers of starlight; banks to assess credit risk and prevent fraud. In the Netherlands, the authorities use it to monitor social-welfare payments. In China AI-powered facial recognition lets customers buy groceries.</p><p>从皮查伊拿它类比电和火也可以看出，机器学习是一种通用技术，能够影响整个经济。它擅长识别数据中的模式，而这在任何地方都有用。鸟类学家用它来分类鸟类鸣叫；天文学家用它在微弱的星光中寻找行星；银行用它评估信用风险，防范欺诈。在荷兰，当局用它监控社会福利支付系统。在中国，由AI技术驱动的人脸识别功能让顾客可以“刷脸”购买食品杂货。</p><p>AI’s heralds say further transformations are still to come, for better and for worse. In 2016 Geoffrey Hinton, a computer scientist who has made fundamental contributions to modern AI, remarked that “it’s quite obvious that we should stop training radiologists,” on the grounds that computers will soon be able to do everything they do, only cheaper and faster. Developers of self-driving cars, meanwhile, predict that robotaxis will revolutionise transport. Eric Schmidt, a former chairman of Google (and a former board member of The Economist’s parent company) hopes that AI could accelerate research, helping human scientists keep up with a deluge of papers and data.</p><p>AI的先驱们说，还会发生更多转变，有好有坏。2016年，为现代AI做出了基础性贡献的计算机科学家杰弗里·辛顿（Geoffrey Hinton）表示：“显而易见，我们应该停止培训放射科医生了”，因为计算机很快将能完成他们所有的工作，而且成本更低，速度更快。与此同时，无人驾驶汽车的开发人员预测机器人出租车将彻底改变交通运输。谷歌前董事长（也是《经济学人》母公司的前董事会成员）埃里克·施密特（Eric Schmidt）希望AI能让科研提速，帮助人类科学家跟上论文和数据的洪流。</p><p>In January a group of researchers published a paper in Cell describing an AI system that had predicted antibacterial function from molecular structure. Of 100 candidate molecules selected by the system for further analysis, one proved to be a potent new antibiotic. The covid-19 pandemic has thrust such medical applications firmly into the spotlight. An AI firm called BlueDot claims it spotted signs of a novel virus in reports from Chinese hospitals as early as December. Researchers have been scrambling to try to apply AI to everything from drug discovery to interpreting medical scans and predicting how the virus might evolve.</p><p>今年1月，一组研究人员在《细胞》（Cell）期刊上发表了一篇论文，描述了一个根据分子结构预测抗菌功能的AI系统。该系统选出了100个分子供进一步分析，其中之一后来被证实是一种有效的新抗生素。新冠大流行使得这类医疗应用被牢牢聚焦。AI公司“蓝点”（BlueDot）声称，它早在去年12月中国医院的报告中就发现了一种新型病毒的迹象。研究人员一直在努力尝试把AI应用到药物研发、读取医学扫描影像、预测病毒如何进化等方方面面。</p><h3 id="Dude-where’s-my-self-driving-car-老兄，我的无人车在哪儿呢？"><a href="#Dude-where’s-my-self-driving-car-老兄，我的无人车在哪儿呢？" class="headerlink" title="Dude, where’s my self-driving car? 老兄，我的无人车在哪儿呢？"></a>Dude, where’s my self-driving car? 老兄，我的无人车在哪儿呢？</h3><p>This is not the first wave of AI-related excitement (see timeline in next story). The field began in the mid-1950s when researchers hoped that building human-level intelligence would take a few years—a couple of decades at most. That early optimism had fizzled by the 1970s. A second wave began in the 1980s. Once again the field’s grandest promises went unmet. As reality replaced the hype, the booms gave way to painful busts known as “AI winters”. Research funding dried up, and the field’s reputation suffered.</p><p>这并不是第一波AI热潮。这个领域发端于1950年代中期，当时研究人员希望用几年时间——顶多二三十年——就建立起和人类水平相当的机器智能。到了1970年代，这种最初的乐观情绪已经消散殆尽。第二波热潮始于1980年代。该领域最宏伟的承诺又一次落空。随着现实取代了炒作，繁荣让位给了痛苦的萧条期——所谓的“人工智能之冬”。研究经费枯竭，行业的声誉也受损。</p><p>Modern AI technology has been far more successful. Billions of people use it every day, mostly without noticing, inside their smartphones and internet services. Yet despite this success, the fact remains that many of the grandest claims made about AI have once again failed to become reality, and confidence is wavering as researchers start to wonder whether the technology has hit a wall. Self-driving cars have become more capable, but remain perpetually on the cusp of being safe enough to deploy on everyday streets. Efforts to incorporate AI into medical diagnosis are, similarly, taking longer than expected: despite Dr Hinton’s prediction, there remains a global shortage of human radiologists.</p><p>现代AI技术要成功得多。每天都有几十亿人在智能手机和互联网服务中用到它——大多数时候都毫无知觉。然而，尽管取得了这样的成功，现实依然是许多关于AI的最宏大的断言再度成空。而随着研究人员开始怀疑这项技术是否已经走到了瓶颈，人们的信心动摇了。无人车已经变得更有能耐，但始终差一口气，还不能足够安全地开上日常的街道。同样，将AI整合到医学诊断中的努力比预期花费的时间更长：尽管辛顿博士做出了那样的预测，全球范围内人类放射科医师仍然短缺。</p><p>Surveying the field of medical AI in 2019, Eric Topol, a cardiologist and AI enthusiast, wrote that “the state of AI hype has far exceeded the state of AI science, especially when it pertains to validation and readiness for implementation in patient care”. Despite a plethora of ideas, covid-19 is mostly being fought with old weapons that are already to hand. Contacttracing has been done with shoe leather and telephone calls. Clinical trials focus on existing drugs. Plastic screens and paint on the pavement enforce low-tech distancing advice.</p><p>心脏病学家、热衷AI的艾瑞克·托波尔（Eric Topol）2019年调研医疗AI领域后写道：“AI炒作的水平远远超过了AI科学的水平，尤其是在患者护理的验证和实施能力方面。”尽管新想法众多，人们大多都还是在用手头现有的旧式武器在与新冠肺炎作战。对病毒接触者的追踪是靠走访和打电话完成的。临床试验专注于现有药物。塑料隔板和人行道上的油漆执行着技术含量不高的社交疏离建议。</p><p>The same consultants who predict that AI will have a world-altering impact also report that real managers in real companies are finding AI hard to implement, and that enthusiasm for it is cooling. Svetlana Sicular of Gartner, a research firm, says that 2020 could be the year AI falls onto the downslope of her firm’s well-publicised “hype cycle”. Investors are beginning to wake up to bandwagon-jumping: a survey of European AI startups by MMC, a venture-capital fund, found that 40% did not seem to be using any AI at all. “I think there’s definitely a strong element of ‘investor marketing’,” says one analyst delicately.</p><p>那些预测AI会改变世界的顾问们同时也在报告说，真实的公司中真实的经理人发现AI难以实施，对它的热情正在降温。研究公司高德纳（Gartner）的斯韦特兰娜·希克尔勒（Svetlana Sicular）表示，从2020年开始，在其公司提出的著名的“炒作周期”中，AI技术可能进入了下行部分。投资者开始意识到市场的跟风效应：风投基金MMC对欧洲AI创业公司的一项调查发现，有四成公司似乎根本没有用到任何AI。“我认为‘投资者营销’绝对是个重要因素。”一位分析师含蓄地表示。</p><p>This Technology Quarterly will investigate why enthusiasm is stalling. It will argue that although modern AI techniques are powerful, they are also limited, and they can be troublesome and difficult to deploy. Those hoping to make use of AI’s potential must confront two sets of problems.</p><p>本技术季刊将探讨为何热情开始冷却。它将论证，尽管当今的AI技术功能强大，但有其局限性，而且在部署时可能困难重重。那些希望利用AI潜力的人必须直面两方面的问题。</p><p>The first is practical. The machine-learning revolution has been built on three things: improved algorithms, more powerful computers on which to run them, and—thanks to the gradual digitisation of society—more data from which they can learn. Yet data are not always readily available. It is hard to use AI to monitor covid-19 transmission without a comprehensive database of everyone’s movements, for instance. Even when data do exist, they can contain hidden assumptions that can trip the unwary. The newest AI systems’ demand for computing power can be expensive. Large organisations always take time to integrate new technologies: think of electricity in the 20th century or the cloud in the 21st. None of this necessarily reduces AI’s potential, but it has the effect of slowing its adoption.</p><p>首先是实际操作上的。机器学习革命建立在三个事物上：改进的算法、运行算法的更强大的计算机，以及（由于社会逐渐数字化而产生的）更多可让算法从中学习的数据。但数据并不总是现成的。例如，如果没有记录每个人移动轨迹的完整数据库，就很难用AI来监控新冠病毒的传播。即使数据确实存在，它们也可能包含了隐含假设而误导那些不够警觉的人。最新的AI系统对计算能力的需求可能耗资巨大。大型组织总是要耗时长久才能将新技术融入自己的体系：想想20世纪的电力或21世纪的云。所有这些不一定会减少AI的潜力，但会拖慢采用它的速度。</p><p>The second set of problems runs deeper, and concerns the algorithms themselves. Machine learning uses thousands or millions of examples to train a software model (the structure of which is loosely based on the neural architecture of the brain). The resulting systems can do some tasks, such as recognising images or speech, far more reliably than those programmed the traditional way with hand-crafted rules, but they are not “intelligent” in the way that most people understand the term. They are powerful pattern-recognition tools, but lack many cognitive abilities that biological brains take for granted. They struggle with reasoning, generalising from the rules they discover, and with the general-purpose savoir faire that researchers, for want of a more precise description, dub “common sense”. The result is an artificial idiot savant that can excel at well-bounded tasks, but can get things very wrong if faced with unexpected input.</p><p>第二组问题更深入，涉及算法本身。机器学习用成千上万或几百万个示例来训练软件模型（其结构大致基于人脑的神经结构）。所生成的系统可以执行某些任务，如识别图像或语音，它们比用人工设计的规则来编程的传统方法可靠得多，但其“智慧”并不是大多数人所理解的那种。它们是强大的模式识别工具，但没有对生物大脑而言理所当然的诸多认知能力。它们难以做出推理、归纳自己发现的规则，也难以获得通用的应变能力——对于这种能力，研究人员找不到更精确的称法，而叫它“常识”。其结果就是一个人工弱智专才，在清晰界定的任务上表现杰出，但如果遇到意料之外的输入，就可能错得离谱。</p><p>Without another breakthrough, these drawbacks put fundamental limits on what AI can and cannot do. Self-driving cars, which must navigate an ever-changing world, are already delayed, and may never arrive at all. Systems that deal with language, like chatbots and personal assistants, are built on statistical approaches that generate a shallow appearance of understanding, without the reality. That will limit how useful they can become. Existential worries about clever computers making radiologists or lorry drivers obsolete—let alone, as some doom-mongers suggest, posing a threat to humanity’s survival—seem overblown. Predictions of a Chinese-economy-worth of extra GDP look implausible.</p><p>如果不出现一项新的突破，这些弊端就从根本上限定了AI可以做什么，不能做什么。无人车必须能在一个瞬息万变的世界里自如驰骋，它已经延期交付了，甚至可能永远不会到达。诸如聊天机器人和个人助理之类处理语言的系统都建立在统计方法之上，它们会生成一种肤浅的理解的表象，而脱离现实。这将限制它们的用处。生存方面的担忧——认为聪明的计算机会让放射科医生或货车司机失业——似乎过头了，更别提一些末日论者所说的整个人类的生存岌岌可危了。认为AI会带来等同于一整个中国经济体量的额外GDP的预测看起来也不可信。</p><p>Today’s “AI summer” is different from previous ones. It is brighter and warmer, because the technology has been so widely deployed. Another full-blown winter is unlikely. But an autumnal breeze is picking up. </p><p>今天的“人工智能之夏”不同以往。这种技术已经被如此广泛地部署，这个夏天更明亮，也更炽热。进入又一个全面的寒冬已不大可能。但秋天的微风已开始轻拂。</p>]]></content>
      
      
      <categories>
          
          <category> translation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Setup VPN on AWS</title>
      <link href="/2020/01/15/SetupVPNonAWS/"/>
      <url>/2020/01/15/SetupVPNonAWS/</url>
      
        <content type="html"><![CDATA[<h2 id="Setup-VPN-on-AWS"><a href="#Setup-VPN-on-AWS" class="headerlink" title="Setup VPN on AWS"></a>Setup VPN on AWS</h2><p><a href="https://github.com/trailofbits/algo" target="_blank" rel="noopener">Algo</a> provides an opportunity to setup personal VPN easily, which allows people to deploy personal VPN sever on AWS for 1 year freely.</p><a id="more"></a><h3 id="Setp-0-setup-AWS-account"><a href="#Setp-0-setup-AWS-account" class="headerlink" title="Setp 0: setup AWS account"></a>Setp 0: setup AWS account</h3><ol><li>Head to the Amazon Web Services site and create a free account. You can link your current Amazon account to your web services account if you want.</li><li>Once you’re logged in, Click Services &gt; IAM. It’s located under the Security, Identity, &amp; Compliance tab.</li><li>Click the Users tab on the left.</li><li>Click Add User.</li><li>Create a user name, then click the box next to Programmatic Access. Then click Next.</li><li>Click Attach existing policies directly.</li><li>Type in “admin” to search through the policies. Find “AdministratorAccess” and click the checkbox next to that. Click Next when you’re done.</li><li>On the final screen, click the Download CSV button. This file includes a couple numbers and access keys you’ll need during the Algo set up process. Click Close and you’re all set.</li></ol><h3 id="Step-1-deploy-VPN-on-AWS-with-algo"><a href="#Step-1-deploy-VPN-on-AWS-with-algo" class="headerlink" title="Step 1: deploy VPN on AWS with algo"></a>Step 1: deploy VPN on AWS with algo</h3><ol><li>Download Algo <code>git clone https://github.com/trailofbits/algo.git</code>.</li><li>Download requirements <code>cd Algo &amp;&amp; python3 -m pip install --user --upgrade virtualenv &amp;&amp; python3 -m virtualenv env &amp;&amp; source env/bin/activate &amp;&amp; python3 -m pip install -r requirements.txt</code>.</li><li>Setup personal configures <code>vim config.cfg</code> and change <strong>users</strong> setting in line 7 or just ignore it.</li><li>Deploy Algo on AWS EC2  <code>./algo</code> and then choose options <code>3. Amazon EC2</code> </li><li>Input AWS Access Key and AWS Secret Key in the CSV file that was downloaded when setup AWS account.</li><li>Choose several <code>y</code>s to setup Aglo Server on AWS.</li><li>Just choose America region instead of Asian, since Tokyo didnot succeed in my machine and Hongkong didnot active by default on AWS.</li></ol><h3 id="Step-2-setup-VPN-on-clients"><a href="#Step-2-setup-VPN-on-clients" class="headerlink" title="Step 2: setup VPN on clients"></a>Step 2: setup VPN on clients</h3><p>There are two ways to setup clients, the newer is <strong>WireGuard</strong>, which are now recommended on github page and <strong>strongSwan</strong>, which are often used in linux.</p><h4 id="WireGuard-approach"><a href="#WireGuard-approach" class="headerlink" title="WireGuard approach"></a>WireGuard approach</h4><p>Certificates and configuration files that users will need are placed in the configs directory. Make sure to secure these files since many contain private keys. All files are saved under a subdirectory named with the IP address of your new Algo VPN server.</p><h5 id="Apple-Devices"><a href="#Apple-Devices" class="headerlink" title="Apple Devices"></a>Apple Devices</h5><p>WireGuard is used to provide VPN services on Apple devices. Algo generates a WireGuard configuration file, wireguard/<username>.conf, and a QR code, wireguard/<username>.png, for each user defined in config.cfg.</username></username></p><p>On iOS, install the WireGuard app from the iOS App Store. Then, use the WireGuard app to scan the QR code or AirDrop the configuration file to the device.</p><p>On macOS Mojave or later, install the WireGuard app from the Mac App Store. WireGuard will appear in the menu bar once you run the app. Click on the WireGuard icon, choose Import tunnel(s) from file…, then select the appropriate WireGuard configuration file.</p><p>On either iOS or macOS, you can enable “Connect on Demand” and/or exclude certain trusted Wi-Fi networks (such as your home or work) by editing the tunnel configuration in the WireGuard app. (Algo can’t do this automatically for you.)</p><p>Installing WireGuard is a little more complicated on older version of macOS. See Using macOS as a Client with WireGuard.</p><p>If you prefer to use the built-in IPSEC VPN on Apple devices, or need “Connect on Demand” or excluded Wi-Fi networks automatically configured, then see Using Apple Devices as a Client with IPSEC.</p><h5 id="Android-Devices"><a href="#Android-Devices" class="headerlink" title="Android Devices"></a>Android Devices</h5><p>WireGuard is used to provide VPN services on Android. Install the WireGuard VPN Client. Import the corresponding wireguard/<name>.conf file to your device, then setup a new connection with it. See the Android setup instructions for more detailed walkthrough.</name></p><h5 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h5><p>WireGuard is used to provide VPN services on Windows. Algo generates a WireGuard configuration file, wireguard/<username>.conf, for each user defined in config.cfg.</username></p><p>Install the WireGuard VPN Client. Import the generated wireguard/<username>.conf file to your device, then setup a new connection with it.</username></p><h5 id="Linux-WireGuard-Clients"><a href="#Linux-WireGuard-Clients" class="headerlink" title="Linux WireGuard Clients"></a>Linux WireGuard Clients</h5><p>WireGuard works great with Linux clients. See this page for an example of how to configure WireGuard on Ubuntu.</p><h4 id="Swan-approach"><a href="#Swan-approach" class="headerlink" title="Swan approach"></a>Swan approach</h4><h5 id="Apple-Devices-1"><a href="#Apple-Devices-1" class="headerlink" title="Apple Devices"></a>Apple Devices</h5><p>Inside the <strong>configs</strong> folder, you’ll find a .mobileconfig file. On Mac, double-click that file to install the profile on your Mac. To install the profile on an iPhone or iPad, you can either Airdrop that same file from your Mac to your iOS device, email it to yourself, or upload it to cloud service like iCloud or Dropbox and open it from there. You’ll be asked to confirm the profile installation, and from then on, you’ll be connected to that VPN. You can disconnect by simply deleting the profile.</p><h5 id="Android-Devices-1"><a href="#Android-Devices-1" class="headerlink" title="Android Devices"></a>Android Devices</h5><p>On Android, you need to first install the strongSwan VPN Client app. Then, copy the P12 file inside the Configs folder over to your Android device and open it in strongSwan. Follow the directions from there to set it up. If you need help, this guide will walk you through each part.</p><h5 id="Windows-1"><a href="#Windows-1" class="headerlink" title="Windows"></a>Windows</h5><ol><li>Head to the <strong>configs</strong> folder, then copy the PEM, P12, and PS1 files to your Windows machine.</li><li>Double-click the PEM file to import it to the Trusted Root certificate store.</li><li>Open the Powershell application, then navigate to the folder with the files you copied in step one a second ago.</li><li>Type in, Set-ExecutionPolicy Unrestricted -Scope CurrentUser and press Enter.</li><li>Type in the name of your Powershell script and press Enter. This will be something like windows_$usernameyoumadeup.ps1. Follow the directions on screen.</li><li>Finally, when that’s complete type in Set-ExecutionPolicy Restricted -Scope CurrentUser and press Enter.</li></ol>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unsigned integers in cpp</title>
      <link href="/2019/05/07/unsigned-intergers-in-cpp/"/>
      <url>/2019/05/07/unsigned-intergers-in-cpp/</url>
      
        <content type="html"><![CDATA[<p>In <a href="https://en.wikipedia.org/wiki/Computer_programming" target="_blank" rel="noopener">computer programming</a>, an <strong>integer overflow</strong> occurs when an <a href="https://en.wikipedia.org/wiki/Arithmetic" target="_blank" rel="noopener">arithmetic</a>  operation attempts to create a numeric value that is outside of the  range that can be represented with a given number of digits – either  larger than the maximum or lower than the minimum representable value. </p><p>The most common result of an overflow is that the least  significant representable digits of the result are stored; the result is  said to <em>wrap</em> around the maximum (i.e. <a href="https://en.wikipedia.org/wiki/Modular_arithmetic" target="_blank" rel="noopener">modulo</a> a power of the <a href="https://en.wikipedia.org/wiki/Radix" target="_blank" rel="noopener">radix</a>, usually two in modern computers, but sometimes ten or another radix). </p><p>An overflow condition may give results leading to unintended  behavior. In particular, if the possibility has not been anticipated,  overflow can compromise a program’s reliability and <a href="https://en.wikipedia.org/wiki/Software_security" target="_blank" rel="noopener">security</a>. </p><a id="more"></a><h3 id="Unsigned-integer-range"><a href="#Unsigned-integer-range" class="headerlink" title="Unsigned integer range"></a>Unsigned integer range</h3><p>We all know that <code>c++</code> supports both <strong>signed integer</strong> and <strong>unsigned integer</strong>, the most regular example would be:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// the usage of signed integer with 4-bytes.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; container.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// do something    </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// the usage of unsigned integer with 4-bytes.</span></span><br><span class="line"><span class="comment">/// why do developer do in this way for that `size()` returns a unsigned type</span></span><br><span class="line"><span class="comment">/// and size_t is actually a typedef of unsigned type in cpp</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; container.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Both of them would be behaving well. If we need a bigger number, we would use more bytes to present it </p><table><thead><tr><th>size/type</th><th>range</th></tr></thead><tbody><tr><td>1 byte unsigned</td><td>0 to 255</td></tr><tr><td>2 byte unsigned</td><td>0 to 65,535</td></tr><tr><td>4 byte unsigned</td><td>0 to 4,294,967,295</td></tr><tr><td>8 byte unsigned</td><td>0 to18,446,744,073,709,551,615</td></tr></tbody></table><p>An n-bit unsigned variable has a range of 0 to (2^n)-1.</p><h3 id="Unsigned-integer-overflow"><a href="#Unsigned-integer-overflow" class="headerlink" title="Unsigned integer overflow"></a>Unsigned integer overflow</h3><p>But when we traverse a container in reversed direction, would it properly behave as we expected?</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// signed integer example</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = container.size()<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// unsigned integer example</span></span><br><span class="line"><span class="comment">// dead loop here</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = container.size()<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// do somthing</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>No, when we traverse a container in reversed direction with <strong>unsigned integer</strong>, it would cause <strong>dead loop</strong>.</p><h4 id="Overflow-reasons"><a href="#Overflow-reasons" class="headerlink" title="Overflow reasons"></a>Overflow reasons</h4><p>Why would it cause dead loop, but <strong>signed integer</strong> would not? Actually dead loop usually can not be caught easily, because the program does not raise any intuitive marks. But, we could check the log or debug it step by step or set break points just in your new codes(<a href="https://en.wikipedia.org/wiki/Test-driven_development" target="_blank" rel="noopener">TDD</a> suggests you do like this, and it usually works). </p><p>Here, we simplify it like:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">5</span>; i &gt;=<span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"i = "</span> &lt;&lt; i &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">5</span>; j &gt;=<span class="number">0</span>; j--)</span><br><span class="line">&#123;</span><br><span class="line">     <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"j = "</span> &lt;&lt; j &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>we might get(run on x64):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">i = 5</span><br><span class="line">i = 4</span><br><span class="line">i = 3</span><br><span class="line">i = 2</span><br><span class="line">i = 1</span><br><span class="line">i = 0 </span><br><span class="line">j = 5</span><br><span class="line">j = 4</span><br><span class="line">j = 3</span><br><span class="line">j = 2</span><br><span class="line">j = 1</span><br><span class="line">j = 0</span><br><span class="line">j = 18446744073709551615</span><br><span class="line">j = 18446744073709551614</span><br><span class="line">j = 18446744073709551613</span><br><span class="line">j = 18446744073709551612</span><br><span class="line">j = 18446744073709551611</span><br><span class="line">j = 18446744073709551610</span><br><span class="line">j = 18446744073709551609</span><br><span class="line">j = 18446744073709551608</span><br><span class="line">j = 18446744073709551607</span><br><span class="line">j = 18446744073709551606</span><br><span class="line">...</span><br><span class="line">j = 0</span><br><span class="line">j = 18446744073709551615</span><br><span class="line">j = 18446744073709551614</span><br><span class="line">...</span><br><span class="line">j = 0</span><br><span class="line">j = 18446744073709551615</span><br><span class="line">j = 18446744073709551614</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>the first loop stopped because <code>i</code> reached <code>-1</code>, while<code>j</code> is always positive number as a <strong>unsigned type</strong>. It will not be less than <code>0</code>, so the program did not stopped. </p><p><code>size_t</code> is a typedef of <code>long unsigned int</code>and we found that it would reach to the biggest 8-bytes unsigned integer(run on x64) and then decrease to 0 then repeat it again and again. The reason is that a unsigned integer will be represented by the type simply “wraps around”(sometimes called “modulo wrapping”) when it is “overflow”(not real overflow, since the ISO standard states that for unsigned integers modulo wrapping is the defined behavior and the term overflow never applies:”a computation involving unsigned operands can never overflow.”). </p><p>That is when we try to store the number <code>-1</code>(which requires 9 bytes to represent) in a 8-byte unsigned integer, it would not overflow. Instead, if a value is out of range, it is divided by one greater than the largest number of the type, and only the remainder kept. The number <code>-1</code> it too less to fit in our 8-byte range of <code>0</code> to <code>18,446,744,073,709,551,615</code>. <code>1</code>greater than the largest number of type is <code>18,446,744,073,709,551,616</code>, therefore, we divide <code>-1</code> by <code>18,446,744,073,709,551,616</code>, getting <code>1</code> remainder <code>18,446,744,073,709,551,615</code>, the remainder of <code>18,446,744,073,709,551,615</code> is what is stored.</p><p>When we store the number <code>280</code>(which requires 9 bits to represent) in a 8-bits unsigned integer, it would also not overflow. <code>280</code> is greater than <code>255</code>(the largest number of 8-bits unsigned type). <code>1</code> greater than <code>255</code> is <code>256</code>, so we divide <code>280</code> by <code>256</code>, getting <code>1</code> remainder <code>24</code> which would be stored. </p><p>When we figure out the quiz, the solution may be simple, DO NOT use unsigned type when traverse a container with reverse direction.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// always use signed type when traverse with reverse direction</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = container.size()<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// or use iterator</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = container.end() <span class="number">-1</span>; it != container.begin(); it--)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// or just reverse iterator</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = container.rbegin(); it != container.rend(); it++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In common language, <strong>unsigned integer wrap around</strong> is sometimes incorrectly called “overflow” since the cause is identical to signed integer overflow which is undefine behavior in ISO standard. </p><h3 id="Other-overflow-examples"><a href="#Other-overflow-examples" class="headerlink" title="Other overflow examples"></a>Other overflow examples</h3><p>Many notable bugs in video game history happened due to wrap around behavior with unsigned integers.<br>In the arcade game Donkey Kong, it’s not possible to go past level 22 due to an bug that leaves the user with not enough bonus time to complete the level.<br>In the PC game Civilization, Gandhi was known for being the first one to use nuclear weapons, which seems contrary to his normally passive nature. Gandhi’s aggression setting was normally set at 1, but if he went democratic, he’d get a -2 modifier. This wrapped around his aggression setting to 255, making him maximally aggressive!</p><h3 id="The-controversy-over-unsigned-numbers"><a href="#The-controversy-over-unsigned-numbers" class="headerlink" title="The controversy over unsigned numbers"></a>The controversy over unsigned numbers</h3><p>Many developers (and some large development houses, such as Google)  believe that developers should generally avoid unsigned integers.</p><p>This is largely because of two behaviors that can cause problems.</p><p>First, consider the subtraction of two unsigned numbers, such as 3  and 5.  3 minus 5 is -2, but -2 isn’t representable as an unsigned  number.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> y = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; x-y &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">// 4294967294</span></span><br></pre></td></tr></table></figure><p>The occurs due to <code>-2</code> wrapping around to a number close to the top of the range of a 4-byte integer.</p><p>Second, unexpected behavior can result when you mix signed and  unsigned integers.  In the above example, even if one of the operands (x  or y) is signed, the same behavior will result!</p><p>Consider the following snippet:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fun(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The author of fun() was expecting someone to call this  function with only positive numbers.  But the caller is passing in <em>-1</em>.  What happens in this case?</p><p>The signed argument of <em>-1</em> gets implicitly converted to an  unsigned parameter.  <em>-1</em> isn’t in the range of an unsigned number, so it  wraps around to some large number (probably <code>4294967295</code>).  Then the program goes ballistic.  Worse, there’s no good way to guard against  this condition from happening.  C++ will freely convert between signed  and unsigned numbers, but it won’t do any range checking to make sure  you don’t overflow your type.</p><p>Many modern programming languages (such as Java and C#) either don’t include unsigned types, or limit their use. Python would raise a exception.</p><p><strong>Bjarne Stroustrup</strong>,  the designer of C++, said, “Using an <code>unsigned</code> instead of an <code>int</code> to gain one more bit to represent positive integers is almost never a good idea”.</p><p>Unfortunately, due to some poor design choices in the C++ standard  library, completely avoiding unsigned numbers in C++ isn’t possible at  this point in time.</p><p>Warning</p><blockquote><p>  Avoid unsigned numbers whenever possible.  Don’t avoid negative  numbers by using unsigned types.  If you need a larger range, use a  larger signed type.If you do use unsigned numbers, take care not to mix signed and unsigned numbers.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to specify a newer version gcc for cmake</title>
      <link href="/2019/04/10/How-to-specify-a-newer-version-gcc-for-cmake/"/>
      <url>/2019/04/10/How-to-specify-a-newer-version-gcc-for-cmake/</url>
      
        <content type="html"><![CDATA[<p>After I upgraded <code>gcc</code> from <em>version of 4.4.7</em> to <em>version of 7.4.0</em> on <strong>CentOS 6.5</strong>, some ridiculous bugs happened when I linked my project to <code>gtest</code>. So I rebuilt <code>gtest</code> using the newer <code>gcc</code>, however, bugs remained. In the end, I found that <code>cmake</code> did not use the newer <code>gcc</code> when I was typing <code>cmake ..</code> command, I guessed that was the key. </p><a id="more"></a><h3 id="How-to-upgrade-gcc-to-a-newer-version"><a href="#How-to-upgrade-gcc-to-a-newer-version" class="headerlink" title="How to upgrade gcc to a newer version"></a>How to upgrade <code>gcc</code> to a newer version</h3><h4 id="install-development-tools"><a href="#install-development-tools" class="headerlink" title="install development tools"></a>install development tools</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum groupinstall <span class="string">"Development Tools"</span></span><br><span class="line">yum install glibc-static libstdc++-static</span><br></pre></td></tr></table></figure><h4 id="download-gcc-package"><a href="#download-gcc-package" class="headerlink" title="download gcc package"></a>download <code>gcc</code> package</h4><p><code>http://mirror.hust.edu.cn/gnu/gcc/</code> turned out to be the most fastest mirror in China. </p><h4 id="build-gcc"><a href="#build-gcc" class="headerlink" title="build gcc"></a>build <code>gcc</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tar -Jxvf gcc-7.4.0.tar.xz</span><br><span class="line"><span class="built_in">cd</span> gcc-7.4.0</span><br><span class="line">./contrib/download_prerequisits</span><br><span class="line">mkdir BUILD</span><br><span class="line"><span class="built_in">cd</span> BUILD</span><br><span class="line">../configure --<span class="built_in">enable</span>-checking=release --<span class="built_in">enable</span>-languages=c,c++ --<span class="built_in">disable</span>-multilib</span><br><span class="line">make -j4</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>Note that <code>./contrib/download_prerequisits</code> will download 4 packages:</p><ul><li><p>mpc-1.0.3.tar.gc</p></li><li><p>mpfr-3.1.4.tar.bz2</p></li><li><p>gmp-6.1.9.tar.bz2</p></li><li><p>isl-0.16.1.tar.bz2</p></li></ul><h4 id="new-feature-support-testing"><a href="#new-feature-support-testing" class="headerlink" title="new feature support testing"></a>new feature support testing</h4><p>v7.4.0 support c++17, here is a sample from <a href="https://en.cppreference.com/w/cpp/utility/any" target="_blank" rel="noopener">cppreference</a>.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// cpp17_any.cc</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;any&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::boolalpha;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// any type</span></span><br><span class="line">    <span class="built_in">std</span>::any a = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a.type().name() &lt;&lt; <span class="string">": "</span> &lt;&lt; <span class="built_in">std</span>::any_cast&lt;<span class="keyword">int</span>&gt;(a) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    a = <span class="number">3.14</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a.type().name() &lt;&lt; <span class="string">": "</span> &lt;&lt; <span class="built_in">std</span>::any_cast&lt;<span class="keyword">double</span>&gt;(a) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    a = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a.type().name() &lt;&lt; <span class="string">": "</span> &lt;&lt; <span class="built_in">std</span>::any_cast&lt;<span class="keyword">bool</span>&gt;(a) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// bad cast</span></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        a = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::any_cast&lt;<span class="keyword">float</span>&gt;(a) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (<span class="keyword">const</span> <span class="built_in">std</span>::bad_any_cast&amp; e)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; e.what() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// has value</span></span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (a.has_value())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a.type().name() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// reset</span></span><br><span class="line">    a.reset();</span><br><span class="line">    <span class="keyword">if</span> (!a.has_value())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"no value\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// pointer to contained data</span></span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span>* i = <span class="built_in">std</span>::any_cast&lt;<span class="keyword">int</span>&gt;(&amp;a);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *i &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g++ cpp17_any.cc -std=c++17</span><br><span class="line">./a.out</span><br></pre></td></tr></table></figure><p>It would raise linking errors for libraries compatibility. </p><h4 id="update-the-system-newergcc-linker"><a href="#update-the-system-newergcc-linker" class="headerlink" title="update the  system newergcc linker"></a>update the  system newer<code>gcc</code> linker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">find . -name *libstdc++* <span class="comment"># find the newer lib</span></span><br><span class="line">strings ./prev-x86_64-pc-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6.0.24 | grep <span class="string">'CXXABI'</span> </span><br><span class="line">strings ./prev-x86_64-pc-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6.0.24 | grep <span class="string">'GLIBCXX'</span></span><br><span class="line">sudo cp  ./prev-x86_64-pc-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6.0.24 /usr/lib64/</span><br><span class="line">strings /usr/lib64/libstdc++.so.6.0.24 | grep <span class="string">'GLIBCXX'</span> <span class="comment"># check lib</span></span><br><span class="line">strings /usr/lib64/libstdc++.so.6.0.24 | grep <span class="string">'CXXABI'</span> </span><br><span class="line">sudo rm /usr/lib64/libstdc++.so.6</span><br><span class="line">sudo ln -s /usr/lib64/libstdc++.so.6.0.24 /usr/lib64/libstdc++.so.6</span><br><span class="line">strings /usr/lib64/libstdc++.so.6 | grep <span class="string">'CXXABI'</span> <span class="comment"># check lib</span></span><br><span class="line">strings /usr/lib64/libstdc++.so.6 | grep <span class="string">'GLIBCXX'</span></span><br></pre></td></tr></table></figure><p>compile and run  again the output would be:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">i: 1</span><br><span class="line">d: 3.14</span><br><span class="line">b: <span class="literal">true</span></span><br><span class="line">bad any_cast</span><br><span class="line">i</span><br><span class="line">no value</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>Note that <code>gdb</code> would not be compatible for the newer <code>gcc</code>, you should upgrade it too.</p><h3 id="How-to-specify-the-newer-version-gccfor-cmake"><a href="#How-to-specify-the-newer-version-gccfor-cmake" class="headerlink" title="How to specify the newer version gccfor cmake"></a>How to specify the newer version <code>gcc</code>for <code>cmake</code></h3><h4 id="bad-approach"><a href="#bad-approach" class="headerlink" title="bad approach"></a>bad approach</h4><p>For the sake of specify the newer version of <code>gcc</code>, I tried to modify the <strong>CMakeList.txt</strong> by adding some like the following:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>(CMAKE_C_COMPILER <span class="string">"/usr/local/bin/gcc"</span>)</span><br><span class="line"><span class="built_in">set</span>(CMAKE_CXX_COMPILER <span class="string">"/usr/local/bin/g++"</span>)</span><br></pre></td></tr></table></figure><p>which reminds me it is a bad idea, even though I had backed up a copy.</p><h4 id="ideal-approach"><a href="#ideal-approach" class="headerlink" title="ideal approach"></a>ideal approach</h4><p>BUT, <code>export</code> is <a href="https://stackoverflow.com/questions/17275348/how-to-specify-new-gcc-path-for-cmake" target="_blank" rel="noopener">a ideal approach</a>. that is exporting system variables of <code>CXX</code> and <code>CC</code> to CMake’s cache before <code>cmake</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> CC=/usr/<span class="built_in">local</span>/bin/gcc </span><br><span class="line"><span class="built_in">export</span> CXX=/usr/<span class="built_in">local</span>/bin/g++</span><br></pre></td></tr></table></figure><p>The export only needs to be done once, the first time you configure  the project, then those values will be read from the CMake cache.</p><h4 id="reasonable-explaination"><a href="#reasonable-explaination" class="headerlink" title="reasonable explaination"></a>reasonable explaination</h4><p>I recommend against overriding the <code>CMAKE_C(XX)_COMPILER</code>  value for two main reasons: because it won’t play well with CMake’s  cache and because it breaks compiler checks and tooling detection.</p><p>When using the <code>set</code> command, you have three options: </p><ul><li>without cache, to create a normal variable</li><li>with cache, to create a cached variable</li><li>force cache, to always force the cache value when configuring</li></ul><p>Let’s see what happens for the three possible calls to <code>set</code>:</p><p><strong>Without cache</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>(CMAKE_C_COMPILER /usr/bin/clang)</span><br><span class="line"><span class="built_in">set</span>(CMAKE_CXX_COMPILER /usr/bin/clang++)</span><br></pre></td></tr></table></figure><p>When doing this, you create a “normal” variable <code>CMAKE_C(XX)_COMPILER</code>  that hides the cache variable of the same name. That means your  compiler is now hard-coded in your build script and you cannot give it a  custom value. This will be a problem if you have multiple build  environments with different compilers. You could just update your script  each time you want to use a different compiler, but that removes the  value of using CMake in the first place.</p><p>Ok, then, let’s update the cache…</p><p><strong>With cache</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>(CMAKE_C_COMPILER /usr/bin/clang CACHE PATH <span class="string">""</span>)</span><br><span class="line"><span class="built_in">set</span>(CMAKE_CXX_COMPILER /usr/bin/clang++ CACHE PATH <span class="string">""</span>)</span><br></pre></td></tr></table></figure><p>This version will just “not work”. The <code>CMAKE_C(XX)_COMPILER</code> variable is already in the cache, so it won’t get updated unless you force it.</p><p>Ah… let’s use the force, then…</p><p><strong>Force cache</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>(CMAKE_C_COMPILER /usr/bin/clang CACHE PATH <span class="string">""</span> FORCE)</span><br><span class="line"><span class="built_in">set</span>(CMAKE_CXX_COMPILER /usr/bin/clang++ CACHE PATH <span class="string">""</span> FORCE)</span><br></pre></td></tr></table></figure><p>This is almost the same as the “normal” variable version, the only  difference is your value will be set in the cache, so users can see it.  But any change will be overwritten by the <code>set</code> command.</p><p><strong>Breaking compiler checks and tooling</strong></p><p>Early in the configuration process, CMake performs checks on the  compiler: Does it work? Is it able to produce executables? etc. It also  uses the compiler to detect related tools, like <code>ar</code> and <code>ranlib</code>. When you override the compiler value in a script, it’s “too late”, all checks and detections are already done.</p><p>For instance, on my machine with gcc as default compiler, when using the <code>set</code> command to <code>/usr/bin/clang</code>, <code>ar</code> is set to <code>/usr/bin/gcc-ar-7</code>. When using an export before running CMake it is set to <code>/usr/lib/llvm-3.8/bin/llvm-ar</code>.</p><h3 id="How-to-upgrade-gdb"><a href="#How-to-upgrade-gdb" class="headerlink" title="How to upgrade gdb"></a>How to upgrade <code>gdb</code></h3><h4 id="download-the-newest-version-of-gdb"><a href="#download-the-newest-version-of-gdb" class="headerlink" title="download the newest version of gdb"></a>download the newest version of <code>gdb</code></h4><p><code>http://mirror.hust.edu.cn/gnu/gdb/</code></p><h4 id="specify-the-newer-gcc-version-to-build"><a href="#specify-the-newer-gcc-version-to-build" class="headerlink" title="specify the newer gcc version to build"></a>specify the newer <code>gcc</code> version to build</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir BUILD &amp; <span class="built_in">cd</span> BUILD/</span><br><span class="line"><span class="built_in">export</span> CC=/usr/<span class="built_in">local</span>/bin/gcc</span><br><span class="line"><span class="built_in">export</span> CXX=/usr/<span class="built_in">local</span>/bin/g++</span><br></pre></td></tr></table></figure><h4 id="make-it-support-TUI"><a href="#make-it-support-TUI" class="headerlink" title="make it support TUI"></a>make it support TUI</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">../configure --<span class="built_in">enable</span>-tui --with-python=yes</span><br><span class="line">make -j8</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h4 id="make-it-support-STL-pretty-print-message"><a href="#make-it-support-STL-pretty-print-message" class="headerlink" title="make it support STL pretty print message"></a>make it support STL pretty print message</h4><p><strong>copy the following script to local with name like <code>.gdbinit</code></strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#                                                                                                        </span></span><br><span class="line"><span class="comment">#   STL GDB evaluators/views/utilities - 1.03</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   The new GDB commands:                                                         </span></span><br><span class="line"><span class="comment">#     are entirely non instrumental                                             </span></span><br><span class="line"><span class="comment">#     do not depend on any "inline"(s) - e.g. size(), [], etc</span></span><br><span class="line"><span class="comment">#       are extremely tolerant to debugger settings</span></span><br><span class="line"><span class="comment">#                                                                                 </span></span><br><span class="line"><span class="comment">#   This file should be "included" in .gdbinit as following:</span></span><br><span class="line"><span class="comment">#   source stl-views.gdb or just paste it into your .gdbinit file</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   The following STL containers are currently supported:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#       std::vector&lt;T&gt; -- via pvector command</span></span><br><span class="line"><span class="comment">#       std::list&lt;T&gt; -- via plist or plist_member command</span></span><br><span class="line"><span class="comment">#       std::map&lt;T,T&gt; -- via pmap or pmap_member command</span></span><br><span class="line"><span class="comment">#       std::multimap&lt;T,T&gt; -- via pmap or pmap_member command</span></span><br><span class="line"><span class="comment">#       std::set&lt;T&gt; -- via pset command</span></span><br><span class="line"><span class="comment">#       std::multiset&lt;T&gt; -- via pset command</span></span><br><span class="line"><span class="comment">#       std::deque&lt;T&gt; -- via pdequeue command</span></span><br><span class="line"><span class="comment">#       std::stack&lt;T&gt; -- via pstack command</span></span><br><span class="line"><span class="comment">#       std::queue&lt;T&gt; -- via pqueue command</span></span><br><span class="line"><span class="comment">#       std::priority_queue&lt;T&gt; -- via ppqueue command</span></span><br><span class="line"><span class="comment">#       std::bitset&lt;n&gt; -- via pbitset command</span></span><br><span class="line"><span class="comment">#       std::string -- via pstring command</span></span><br><span class="line"><span class="comment">#       std::widestring -- via pwstring command</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   The end of this file contains (optional) C++ beautifiers</span></span><br><span class="line"><span class="comment">#   Make sure your debugger supports $argc</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   Simple GDB Macros writen by Dan Marinescu (H-PhD) - License GPL</span></span><br><span class="line"><span class="comment">#   Inspired by intial work of Tom Malnar, </span></span><br><span class="line"><span class="comment">#     Tony Novac (PhD) / Cornell / Stanford,</span></span><br><span class="line"><span class="comment">#     Gilad Mishne (PhD) and Many Many Others.</span></span><br><span class="line"><span class="comment">#   Contact: dan_c_marinescu@yahoo.com (Subject: STL)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   Modified to work with g++ 4.3 by Anders Elton</span></span><br><span class="line"><span class="comment">#   Also added _member functions, that instead of printing the entire class in map, prints a member.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># std::vector&lt;&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">define pvector</span><br><span class="line"><span class="keyword">if</span> $argc == <span class="number">0</span></span><br><span class="line">help pvector</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">set $size = $arg0._M_impl._M_finish - $arg0._M_impl._M_start</span><br><span class="line">set $capacity = $arg0._M_impl._M_end_of_storage - $arg0._M_impl._M_start</span><br><span class="line">set $size_max = $size - <span class="number">1</span></span><br><span class="line">end</span><br><span class="line"><span class="keyword">if</span> $argc == <span class="number">1</span></span><br><span class="line">set $i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> $i &lt; $size</span><br><span class="line">printf <span class="string">"elem[%u]: "</span>, $i</span><br><span class="line">p *($arg0._M_impl._M_start + $i)</span><br><span class="line">set $i++</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line"><span class="keyword">if</span> $argc == <span class="number">2</span></span><br><span class="line">set $idx = $arg1</span><br><span class="line"><span class="keyword">if</span> $idx &lt; <span class="number">0</span> || $idx &gt; $size_max</span><br><span class="line">printf <span class="string">"idx1, idx2 are not in acceptable range: [0..%u].\n"</span>, $size_max</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">printf <span class="string">"elem[%u]: "</span>, $idx</span><br><span class="line">p *($arg0._M_impl._M_start + $idx)</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line"><span class="keyword">if</span> $argc == <span class="number">3</span></span><br><span class="line">  set $start_idx = $arg1</span><br><span class="line">  set $stop_idx = $arg2</span><br><span class="line">  <span class="keyword">if</span> $start_idx &gt; $stop_idx</span><br><span class="line">    set $tmp_idx = $start_idx</span><br><span class="line">    set $start_idx = $stop_idx</span><br><span class="line">    set $stop_idx = $tmp_idx</span><br><span class="line">  end</span><br><span class="line">  <span class="keyword">if</span> $start_idx &lt; <span class="number">0</span> || $stop_idx &lt; <span class="number">0</span> || $start_idx &gt; $size_max || $stop_idx &gt; $size_max</span><br><span class="line">    printf <span class="string">"idx1, idx2 are not in acceptable range: [0..%u].\n"</span>, $size_max</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    set $i = $start_idx</span><br><span class="line"><span class="keyword">while</span> $i &lt;= $stop_idx</span><br><span class="line">printf <span class="string">"elem[%u]: "</span>, $i</span><br><span class="line">p *($arg0._M_impl._M_start + $i)</span><br><span class="line">set $i++</span><br><span class="line">end</span><br><span class="line">  end</span><br><span class="line">end</span><br><span class="line"><span class="keyword">if</span> $argc &gt; <span class="number">0</span></span><br><span class="line">printf <span class="string">"Vector size = %u\n"</span>, $size</span><br><span class="line">printf <span class="string">"Vector capacity = %u\n"</span>, $capacity</span><br><span class="line">printf <span class="string">"Element "</span></span><br><span class="line">whatis $arg0._M_impl._M_start</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">document pvector</span><br><span class="line">Prints std::vector&lt;T&gt; information.</span><br><span class="line">Syntax: pvector &lt;vector&gt; &lt;idx1&gt; &lt;idx2&gt;</span><br><span class="line">Note: idx, idx1 <span class="keyword">and</span> idx2 must be <span class="keyword">in</span> acceptable range [<span class="number">0.</span>.&lt;vector&gt;.size()<span class="number">-1</span>].</span><br><span class="line">Examples:</span><br><span class="line">pvector v - Prints vector content, size, capacity <span class="keyword">and</span> T typedef</span><br><span class="line">pvector v <span class="number">0</span> - Prints element[idx] <span class="keyword">from</span> vector</span><br><span class="line">pvector v <span class="number">1</span> <span class="number">2</span> - Prints elements <span class="keyword">in</span> range [idx1..idx2] <span class="keyword">from</span> vector</span><br><span class="line">end </span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># std::list&lt;&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">define plist</span><br><span class="line"><span class="keyword">if</span> $argc == <span class="number">0</span></span><br><span class="line">help plist</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">set $head = &amp;$arg0._M_impl._M_node</span><br><span class="line">set $current = $arg0._M_impl._M_node._M_next</span><br><span class="line">set $size = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> $current != $head</span><br><span class="line"><span class="keyword">if</span> $argc == <span class="number">2</span></span><br><span class="line">printf <span class="string">"elem[%u]: "</span>, $size</span><br><span class="line">p *($arg1*)($current + <span class="number">1</span>)</span><br><span class="line">end</span><br><span class="line"><span class="keyword">if</span> $argc == <span class="number">3</span></span><br><span class="line"><span class="keyword">if</span> $size == $arg2</span><br><span class="line">printf <span class="string">"elem[%u]: "</span>, $size</span><br><span class="line">p *($arg1*)($current + <span class="number">1</span>)</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line">set $current = $current._M_next</span><br><span class="line">set $size++</span><br><span class="line">end</span><br><span class="line">printf <span class="string">"List size = %u \n"</span>, $size</span><br><span class="line"><span class="keyword">if</span> $argc == <span class="number">1</span></span><br><span class="line">printf <span class="string">"List "</span></span><br><span class="line">whatis $arg0</span><br><span class="line">printf <span class="string">"Use plist &lt;variable_name&gt; &lt;element_type&gt; to see the elements in the list.\n"</span></span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">document plist</span><br><span class="line">Prints std::list&lt;T&gt; information.</span><br><span class="line">Syntax: plist &lt;list&gt; &lt;T&gt; &lt;idx&gt;: Prints list size, <span class="keyword">if</span> T defined all elements <span class="keyword">or</span> just element at idx</span><br><span class="line">Examples:</span><br><span class="line">plist l - prints list size <span class="keyword">and</span> definition</span><br><span class="line">plist l int - prints all elements <span class="keyword">and</span> list size</span><br><span class="line">plist l int <span class="number">2</span> - prints the third element <span class="keyword">in</span> the list (<span class="keyword">if</span> exists) <span class="keyword">and</span> list size</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">define plist_member</span><br><span class="line"><span class="keyword">if</span> $argc == <span class="number">0</span></span><br><span class="line">help plist_member</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">set $head = &amp;$arg0._M_impl._M_node</span><br><span class="line">set $current = $arg0._M_impl._M_node._M_next</span><br><span class="line">set $size = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> $current != $head</span><br><span class="line"><span class="keyword">if</span> $argc == <span class="number">3</span></span><br><span class="line">printf <span class="string">"elem[%u]: "</span>, $size</span><br><span class="line">p (*($arg1*)($current + <span class="number">1</span>)).$arg2</span><br><span class="line">end</span><br><span class="line"><span class="keyword">if</span> $argc == <span class="number">4</span></span><br><span class="line"><span class="keyword">if</span> $size == $arg3</span><br><span class="line">printf <span class="string">"elem[%u]: "</span>, $size</span><br><span class="line">p (*($arg1*)($current + <span class="number">1</span>)).$arg2</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line">set $current = $current._M_next</span><br><span class="line">set $size++</span><br><span class="line">end</span><br><span class="line">printf <span class="string">"List size = %u \n"</span>, $size</span><br><span class="line"><span class="keyword">if</span> $argc == <span class="number">1</span></span><br><span class="line">printf <span class="string">"List "</span></span><br><span class="line">whatis $arg0</span><br><span class="line">printf <span class="string">"Use plist_member &lt;variable_name&gt; &lt;element_type&gt; &lt;member&gt; to see the elements in the list.\n"</span></span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">document plist_member</span><br><span class="line">Prints std::list&lt;T&gt; information.</span><br><span class="line">Syntax: plist &lt;list&gt; &lt;T&gt; &lt;idx&gt;: Prints list size, <span class="keyword">if</span> T defined all elements <span class="keyword">or</span> just element at idx</span><br><span class="line">Examples:</span><br><span class="line">plist_member l int member - prints all elements <span class="keyword">and</span> list size</span><br><span class="line">plist_member l int member <span class="number">2</span> - prints the third element <span class="keyword">in</span> the list (<span class="keyword">if</span> exists) <span class="keyword">and</span> list size</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># std::map and std::multimap</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">define pmap</span><br><span class="line"><span class="keyword">if</span> $argc == <span class="number">0</span></span><br><span class="line">help pmap</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">set $tree = $arg0</span><br><span class="line">set $i = <span class="number">0</span></span><br><span class="line">set $node = $tree._M_t._M_impl._M_header._M_left</span><br><span class="line">set $end = $tree._M_t._M_impl._M_header</span><br><span class="line">set $tree_size = $tree._M_t._M_impl._M_node_count</span><br><span class="line"><span class="keyword">if</span> $argc == <span class="number">1</span></span><br><span class="line">printf <span class="string">"Map "</span></span><br><span class="line">whatis $tree</span><br><span class="line">printf <span class="string">"Use pmap &lt;variable_name&gt; &lt;left_element_type&gt; &lt;right_element_type&gt; to see the elements in the map.\n"</span></span><br><span class="line">end</span><br><span class="line"><span class="keyword">if</span> $argc == <span class="number">3</span></span><br><span class="line"><span class="keyword">while</span> $i &lt; $tree_size</span><br><span class="line">set $value = (void *)($node + <span class="number">1</span>)</span><br><span class="line">printf <span class="string">"elem[%u].left: "</span>, $i</span><br><span class="line">p *($arg1*)$value</span><br><span class="line">set $value = $value + sizeof($arg1)</span><br><span class="line">printf <span class="string">"elem[%u].right: "</span>, $i</span><br><span class="line">p *($arg2*)$value</span><br><span class="line"><span class="keyword">if</span> $node._M_right != <span class="number">0</span></span><br><span class="line">set $node = $node._M_right</span><br><span class="line"><span class="keyword">while</span> $node._M_left != <span class="number">0</span></span><br><span class="line">set $node = $node._M_left</span><br><span class="line">end</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">set $tmp_node = $node._M_parent</span><br><span class="line"><span class="keyword">while</span> $node == $tmp_node._M_right</span><br><span class="line">set $node = $tmp_node</span><br><span class="line">set $tmp_node = $tmp_node._M_parent</span><br><span class="line">end</span><br><span class="line"><span class="keyword">if</span> $node._M_right != $tmp_node</span><br><span class="line">set $node = $tmp_node</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line">set $i++</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line"><span class="keyword">if</span> $argc == <span class="number">4</span></span><br><span class="line">set $idx = $arg3</span><br><span class="line">set $ElementsFound = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> $i &lt; $tree_size</span><br><span class="line">set $value = (void *)($node + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> *($arg1*)$value == $idx</span><br><span class="line">printf <span class="string">"elem[%u].left: "</span>, $i</span><br><span class="line">p *($arg1*)$value</span><br><span class="line">set $value = $value + sizeof($arg1)</span><br><span class="line">printf <span class="string">"elem[%u].right: "</span>, $i</span><br><span class="line">p *($arg2*)$value</span><br><span class="line">set $ElementsFound++</span><br><span class="line">end</span><br><span class="line"><span class="keyword">if</span> $node._M_right != <span class="number">0</span></span><br><span class="line">set $node = $node._M_right</span><br><span class="line"><span class="keyword">while</span> $node._M_left != <span class="number">0</span></span><br><span class="line">set $node = $node._M_left</span><br><span class="line">end</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">set $tmp_node = $node._M_parent</span><br><span class="line"><span class="keyword">while</span> $node == $tmp_node._M_right</span><br><span class="line">set $node = $tmp_node</span><br><span class="line">set $tmp_node = $tmp_node._M_parent</span><br><span class="line">end</span><br><span class="line"><span class="keyword">if</span> $node._M_right != $tmp_node</span><br><span class="line">set $node = $tmp_node</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line">set $i++</span><br><span class="line">end</span><br><span class="line">printf <span class="string">"Number of elements found = %u\n"</span>, $ElementsFound</span><br><span class="line">end</span><br><span class="line"><span class="keyword">if</span> $argc == <span class="number">5</span></span><br><span class="line">set $idx1 = $arg3</span><br><span class="line">set $idx2 = $arg4</span><br><span class="line">set $ElementsFound = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> $i &lt; $tree_size</span><br><span class="line">set $value = (void *)($node + <span class="number">1</span>)</span><br><span class="line">set $valueLeft = *($arg1*)$value</span><br><span class="line">set $valueRight = *($arg2*)($value + sizeof($arg1))</span><br><span class="line"><span class="keyword">if</span> $valueLeft == $idx1 &amp;&amp; $valueRight == $idx2</span><br><span class="line">printf <span class="string">"elem[%u].left: "</span>, $i</span><br><span class="line">p $valueLeft</span><br><span class="line">printf <span class="string">"elem[%u].right: "</span>, $i</span><br><span class="line">p $valueRight</span><br><span class="line">set $ElementsFound++</span><br><span class="line">end</span><br><span class="line"><span class="keyword">if</span> $node._M_right != <span class="number">0</span></span><br><span class="line">set $node = $node._M_right</span><br><span class="line"><span class="keyword">while</span> $node._M_left != <span class="number">0</span></span><br><span class="line">set $node = $node._M_left</span><br><span class="line">end</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">set $tmp_node = $node._M_parent</span><br><span class="line"><span class="keyword">while</span> $node == $tmp_node._M_right</span><br><span class="line">set $node = $tmp_node</span><br><span class="line">set $tmp_node = $tmp_node._M_parent</span><br><span class="line">end</span><br><span class="line"><span class="keyword">if</span> $node._M_right != $tmp_node</span><br><span class="line">set $node = $tmp_node</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line">set $i++</span><br><span class="line">end</span><br><span class="line">printf <span class="string">"Number of elements found = %u\n"</span>, $ElementsFound</span><br><span class="line">end</span><br><span class="line">printf <span class="string">"Map size = %u\n"</span>, $tree_size</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">document pmap</span><br><span class="line">Prints std::map&lt;TLeft <span class="keyword">and</span> TRight&gt; <span class="keyword">or</span> std::multimap&lt;TLeft <span class="keyword">and</span> TRight&gt; information. Works <span class="keyword">for</span> std::multimap <span class="keyword">as</span> well.</span><br><span class="line">Syntax: pmap &lt;map&gt; &lt;TtypeLeft&gt; &lt;TypeRight&gt; &lt;valLeft&gt; &lt;valRight&gt;: Prints map size, <span class="keyword">if</span> T defined all elements <span class="keyword">or</span> just element(s) <span class="keyword">with</span> val(s)</span><br><span class="line">Examples:</span><br><span class="line">pmap m - prints map size <span class="keyword">and</span> definition</span><br><span class="line">pmap m int int - prints all elements <span class="keyword">and</span> map size</span><br><span class="line">pmap m int int <span class="number">20</span> - prints the element(s) <span class="keyword">with</span> left-value = <span class="number">20</span> (<span class="keyword">if</span> any) <span class="keyword">and</span> map size</span><br><span class="line">pmap m int int <span class="number">20</span> <span class="number">200</span> - prints the element(s) <span class="keyword">with</span> left-value = <span class="number">20</span> <span class="keyword">and</span> right-value = <span class="number">200</span> (<span class="keyword">if</span> any) <span class="keyword">and</span> map size</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">define pmap_member</span><br><span class="line"><span class="keyword">if</span> $argc == <span class="number">0</span></span><br><span class="line">help pmap_member</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">set $tree = $arg0</span><br><span class="line">set $i = <span class="number">0</span></span><br><span class="line">set $node = $tree._M_t._M_impl._M_header._M_left</span><br><span class="line">set $end = $tree._M_t._M_impl._M_header</span><br><span class="line">set $tree_size = $tree._M_t._M_impl._M_node_count</span><br><span class="line"><span class="keyword">if</span> $argc == <span class="number">1</span></span><br><span class="line">printf <span class="string">"Map "</span></span><br><span class="line">whatis $tree</span><br><span class="line">printf <span class="string">"Use pmap &lt;variable_name&gt; &lt;left_element_type&gt; &lt;right_element_type&gt; to see the elements in the map.\n"</span></span><br><span class="line">end</span><br><span class="line"><span class="keyword">if</span> $argc == <span class="number">5</span></span><br><span class="line"><span class="keyword">while</span> $i &lt; $tree_size</span><br><span class="line">set $value = (void *)($node + <span class="number">1</span>)</span><br><span class="line">printf <span class="string">"elem[%u].left: "</span>, $i</span><br><span class="line">p (*($arg1*)$value).$arg2</span><br><span class="line">set $value = $value + sizeof($arg1)</span><br><span class="line">printf <span class="string">"elem[%u].right: "</span>, $i</span><br><span class="line">p (*($arg3*)$value).$arg4</span><br><span class="line"><span class="keyword">if</span> $node._M_right != <span class="number">0</span></span><br><span class="line">set $node = $node._M_right</span><br><span class="line"><span class="keyword">while</span> $node._M_left != <span class="number">0</span></span><br><span class="line">set $node = $node._M_left</span><br><span class="line">end</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">set $tmp_node = $node._M_parent</span><br><span class="line"><span class="keyword">while</span> $node == $tmp_node._M_right</span><br><span class="line">set $node = $tmp_node</span><br><span class="line">set $tmp_node = $tmp_node._M_parent</span><br><span class="line">end</span><br><span class="line"><span class="keyword">if</span> $node._M_right != $tmp_node</span><br><span class="line">set $node = $tmp_node</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line">set $i++</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line"><span class="keyword">if</span> $argc == <span class="number">6</span></span><br><span class="line">set $idx = $arg5</span><br><span class="line">set $ElementsFound = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> $i &lt; $tree_size</span><br><span class="line">set $value = (void *)($node + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> *($arg1*)$value == $idx</span><br><span class="line">printf <span class="string">"elem[%u].left: "</span>, $i</span><br><span class="line">p (*($arg1*)$value).$arg2</span><br><span class="line">set $value = $value + sizeof($arg1)</span><br><span class="line">printf <span class="string">"elem[%u].right: "</span>, $i</span><br><span class="line">p (*($arg3*)$value).$arg4</span><br><span class="line">set $ElementsFound++</span><br><span class="line">end</span><br><span class="line"><span class="keyword">if</span> $node._M_right != <span class="number">0</span></span><br><span class="line">set $node = $node._M_right</span><br><span class="line"><span class="keyword">while</span> $node._M_left != <span class="number">0</span></span><br><span class="line">set $node = $node._M_left</span><br><span class="line">end</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">set $tmp_node = $node._M_parent</span><br><span class="line"><span class="keyword">while</span> $node == $tmp_node._M_right</span><br><span class="line">set $node = $tmp_node</span><br><span class="line">set $tmp_node = $tmp_node._M_parent</span><br><span class="line">end</span><br><span class="line"><span class="keyword">if</span> $node._M_right != $tmp_node</span><br><span class="line">set $node = $tmp_node</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line">set $i++</span><br><span class="line">end</span><br><span class="line">printf <span class="string">"Number of elements found = %u\n"</span>, $ElementsFound</span><br><span class="line">end</span><br><span class="line">printf <span class="string">"Map size = %u\n"</span>, $tree_size</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">document pmap_member</span><br><span class="line">Prints std::map&lt;TLeft <span class="keyword">and</span> TRight&gt; <span class="keyword">or</span> std::multimap&lt;TLeft <span class="keyword">and</span> TRight&gt; information. Works <span class="keyword">for</span> std::multimap <span class="keyword">as</span> well.</span><br><span class="line">Syntax: pmap &lt;map&gt; &lt;TtypeLeft&gt; &lt;TypeRight&gt; &lt;valLeft&gt; &lt;valRight&gt;: Prints map size, <span class="keyword">if</span> T defined all elements <span class="keyword">or</span> just element(s) <span class="keyword">with</span> val(s)</span><br><span class="line">Examples:</span><br><span class="line">pmap_member m class1 member1 class2 member2 - prints class1.member1 : class2.member2</span><br><span class="line">pmap_member m class1 member1 class2 member2 lvalue - prints class1.member1 : class2.member2 where class1 == lvalue</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># std::set and std::multiset</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">define pset</span><br><span class="line"><span class="keyword">if</span> $argc == <span class="number">0</span></span><br><span class="line">help pset</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">set $tree = $arg0</span><br><span class="line">set $i = <span class="number">0</span></span><br><span class="line">set $node = $tree._M_t._M_impl._M_header._M_left</span><br><span class="line">set $end = $tree._M_t._M_impl._M_header</span><br><span class="line">set $tree_size = $tree._M_t._M_impl._M_node_count</span><br><span class="line"><span class="keyword">if</span> $argc == <span class="number">1</span></span><br><span class="line">printf <span class="string">"Set "</span></span><br><span class="line">whatis $tree</span><br><span class="line">printf <span class="string">"Use pset &lt;variable_name&gt; &lt;element_type&gt; to see the elements in the set.\n"</span></span><br><span class="line">end</span><br><span class="line"><span class="keyword">if</span> $argc == <span class="number">2</span></span><br><span class="line"><span class="keyword">while</span> $i &lt; $tree_size</span><br><span class="line">set $value = (void *)($node + <span class="number">1</span>)</span><br><span class="line">printf <span class="string">"elem[%u]: "</span>, $i</span><br><span class="line">p *($arg1*)$value</span><br><span class="line"><span class="keyword">if</span> $node._M_right != <span class="number">0</span></span><br><span class="line">set $node = $node._M_right</span><br><span class="line"><span class="keyword">while</span> $node._M_left != <span class="number">0</span></span><br><span class="line">set $node = $node._M_left</span><br><span class="line">end</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">set $tmp_node = $node._M_parent</span><br><span class="line"><span class="keyword">while</span> $node == $tmp_node._M_right</span><br><span class="line">set $node = $tmp_node</span><br><span class="line">set $tmp_node = $tmp_node._M_parent</span><br><span class="line">end</span><br><span class="line"><span class="keyword">if</span> $node._M_right != $tmp_node</span><br><span class="line">set $node = $tmp_node</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line">set $i++</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line"><span class="keyword">if</span> $argc == <span class="number">3</span></span><br><span class="line">set $idx = $arg2</span><br><span class="line">set $ElementsFound = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> $i &lt; $tree_size</span><br><span class="line">set $value = (void *)($node + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> *($arg1*)$value == $idx</span><br><span class="line">printf <span class="string">"elem[%u]: "</span>, $i</span><br><span class="line">p *($arg1*)$value</span><br><span class="line">set $ElementsFound++</span><br><span class="line">end</span><br><span class="line"><span class="keyword">if</span> $node._M_right != <span class="number">0</span></span><br><span class="line">set $node = $node._M_right</span><br><span class="line"><span class="keyword">while</span> $node._M_left != <span class="number">0</span></span><br><span class="line">set $node = $node._M_left</span><br><span class="line">end</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">set $tmp_node = $node._M_parent</span><br><span class="line"><span class="keyword">while</span> $node == $tmp_node._M_right</span><br><span class="line">set $node = $tmp_node</span><br><span class="line">set $tmp_node = $tmp_node._M_parent</span><br><span class="line">end</span><br><span class="line"><span class="keyword">if</span> $node._M_right != $tmp_node</span><br><span class="line">set $node = $tmp_node</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line">set $i++</span><br><span class="line">end</span><br><span class="line">printf <span class="string">"Number of elements found = %u\n"</span>, $ElementsFound</span><br><span class="line">end</span><br><span class="line">printf <span class="string">"Set size = %u\n"</span>, $tree_size</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">document pset</span><br><span class="line">Prints std::set&lt;T&gt; <span class="keyword">or</span> std::multiset&lt;T&gt; information. Works <span class="keyword">for</span> std::multiset <span class="keyword">as</span> well.</span><br><span class="line">Syntax: pset &lt;set&gt; &lt;T&gt; &lt;val&gt;: Prints set size, <span class="keyword">if</span> T defined all elements <span class="keyword">or</span> just element(s) having val</span><br><span class="line">Examples:</span><br><span class="line">pset s - prints set size <span class="keyword">and</span> definition</span><br><span class="line">pset s int - prints all elements <span class="keyword">and</span> the size of s</span><br><span class="line">pset s int <span class="number">20</span> - prints the element(s) <span class="keyword">with</span> value = <span class="number">20</span> (<span class="keyword">if</span> any) <span class="keyword">and</span> the size of s</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># std::dequeue</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">define pdequeue</span><br><span class="line"><span class="keyword">if</span> $argc == <span class="number">0</span></span><br><span class="line">help pdequeue</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">set $size = <span class="number">0</span></span><br><span class="line">set $start_cur = $arg0._M_impl._M_start._M_cur</span><br><span class="line">set $start_last = $arg0._M_impl._M_start._M_last</span><br><span class="line">set $start_stop = $start_last</span><br><span class="line"><span class="keyword">while</span> $start_cur != $start_stop</span><br><span class="line">p *$start_cur</span><br><span class="line">set $start_cur++</span><br><span class="line">set $size++</span><br><span class="line">end</span><br><span class="line">set $finish_first = $arg0._M_impl._M_finish._M_first</span><br><span class="line">set $finish_cur = $arg0._M_impl._M_finish._M_cur</span><br><span class="line">set $finish_last = $arg0._M_impl._M_finish._M_last</span><br><span class="line"><span class="keyword">if</span> $finish_cur &lt; $finish_last</span><br><span class="line">set $finish_stop = $finish_cur</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">set $finish_stop = $finish_last</span><br><span class="line">end</span><br><span class="line"><span class="keyword">while</span> $finish_first != $finish_stop</span><br><span class="line">p *$finish_first</span><br><span class="line">set $finish_first++</span><br><span class="line">set $size++</span><br><span class="line">end</span><br><span class="line">printf <span class="string">"Dequeue size = %u\n"</span>, $size</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">document pdequeue</span><br><span class="line">Prints std::dequeue&lt;T&gt; information.</span><br><span class="line">Syntax: pdequeue &lt;dequeue&gt;: Prints dequeue size, <span class="keyword">if</span> T defined all elements</span><br><span class="line">Deque elements are listed <span class="string">"left to right"</span> (left-most stands <span class="keyword">for</span> front <span class="keyword">and</span> right-most stands <span class="keyword">for</span> back)</span><br><span class="line">Example:</span><br><span class="line">pdequeue d - prints all elements <span class="keyword">and</span> size of d</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># std::stack</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">define pstack</span><br><span class="line"><span class="keyword">if</span> $argc == <span class="number">0</span></span><br><span class="line">help pstack</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">set $start_cur = $arg0.c._M_impl._M_start._M_cur</span><br><span class="line">set $finish_cur = $arg0.c._M_impl._M_finish._M_cur</span><br><span class="line">set $size = $finish_cur - $start_cur</span><br><span class="line">        set $i = $size - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> $i &gt;= <span class="number">0</span></span><br><span class="line">            p *($start_cur + $i)</span><br><span class="line">            set $i--</span><br><span class="line">        end</span><br><span class="line">printf <span class="string">"Stack size = %u\n"</span>, $size</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">document pstack</span><br><span class="line">Prints std::stack&lt;T&gt; information.</span><br><span class="line">Syntax: pstack &lt;stack&gt;: Prints all elements <span class="keyword">and</span> size of the stack</span><br><span class="line">Stack elements are listed <span class="string">"top to buttom"</span> (top-most element <span class="keyword">is</span> the first to come on pop)</span><br><span class="line">Example:</span><br><span class="line">pstack s - prints all elements <span class="keyword">and</span> the size of s</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># std::queue</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">define pqueue</span><br><span class="line"><span class="keyword">if</span> $argc == <span class="number">0</span></span><br><span class="line">help pqueue</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">set $start_cur = $arg0.c._M_impl._M_start._M_cur</span><br><span class="line">set $finish_cur = $arg0.c._M_impl._M_finish._M_cur</span><br><span class="line">set $size = $finish_cur - $start_cur</span><br><span class="line">        set $i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> $i &lt; $size</span><br><span class="line">            p *($start_cur + $i)</span><br><span class="line">            set $i++</span><br><span class="line">        end</span><br><span class="line">printf <span class="string">"Queue size = %u\n"</span>, $size</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">document pqueue</span><br><span class="line">Prints std::queue&lt;T&gt; information.</span><br><span class="line">Syntax: pqueue &lt;queue&gt;: Prints all elements <span class="keyword">and</span> the size of the queue</span><br><span class="line">Queue elements are listed <span class="string">"top to bottom"</span> (top-most element <span class="keyword">is</span> the first to come on pop)</span><br><span class="line">Example:</span><br><span class="line">pqueue q - prints all elements <span class="keyword">and</span> the size of q</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># std::priority_queue</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">define ppqueue</span><br><span class="line"><span class="keyword">if</span> $argc == <span class="number">0</span></span><br><span class="line">help ppqueue</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">set $size = $arg0.c._M_impl._M_finish - $arg0.c._M_impl._M_start</span><br><span class="line">set $capacity = $arg0.c._M_impl._M_end_of_storage - $arg0.c._M_impl._M_start</span><br><span class="line">set $i = $size - <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> $i &gt;= <span class="number">0</span></span><br><span class="line">p *($arg0.c._M_impl._M_start + $i)</span><br><span class="line">set $i--</span><br><span class="line">end</span><br><span class="line">printf <span class="string">"Priority queue size = %u\n"</span>, $size</span><br><span class="line">printf <span class="string">"Priority queue capacity = %u\n"</span>, $capacity</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">document ppqueue</span><br><span class="line">Prints std::priority_queue&lt;T&gt; information.</span><br><span class="line">Syntax: ppqueue &lt;priority_queue&gt;: Prints all elements, size <span class="keyword">and</span> capacity of the priority_queue</span><br><span class="line">Priority_queue elements are listed <span class="string">"top to buttom"</span> (top-most element <span class="keyword">is</span> the first to come on pop)</span><br><span class="line">Example:</span><br><span class="line">ppqueue pq - prints all elements, size <span class="keyword">and</span> capacity of pq</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># std::bitset</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">define pbitset</span><br><span class="line"><span class="keyword">if</span> $argc == <span class="number">0</span></span><br><span class="line">help pbitset</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        p /t $arg0._M_w</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">document pbitset</span><br><span class="line">Prints std::bitset&lt;n&gt; information.</span><br><span class="line">Syntax: pbitset &lt;bitset&gt;: Prints all bits <span class="keyword">in</span> bitset</span><br><span class="line">Example:</span><br><span class="line">pbitset b - prints all bits <span class="keyword">in</span> b</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># std::string</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">define pstring</span><br><span class="line"><span class="keyword">if</span> $argc == <span class="number">0</span></span><br><span class="line">help pstring</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">printf <span class="string">"String \t\t\t= \"%s\"\n"</span>, $arg0._M_data()</span><br><span class="line">printf <span class="string">"String size/length \t= %u\n"</span>, $arg0._M_rep()._M_length</span><br><span class="line">printf <span class="string">"String capacity \t= %u\n"</span>, $arg0._M_rep()._M_capacity</span><br><span class="line">printf <span class="string">"String ref-count \t= %d\n"</span>, $arg0._M_rep()._M_refcount</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">document pstring</span><br><span class="line">Prints std::string information.</span><br><span class="line">Syntax: pstring &lt;string&gt;</span><br><span class="line">Example:</span><br><span class="line">pstring s - Prints content, size/length, capacity <span class="keyword">and</span> ref-count of string s</span><br><span class="line">end </span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># std::wstring</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">define pwstring</span><br><span class="line"><span class="keyword">if</span> $argc == <span class="number">0</span></span><br><span class="line">help pwstring</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">call printf(<span class="string">"WString \t\t= \"%ls\"\n"</span>, $arg0._M_data())</span><br><span class="line">printf <span class="string">"WString size/length \t= %u\n"</span>, $arg0._M_rep()._M_length</span><br><span class="line">printf <span class="string">"WString capacity \t= %u\n"</span>, $arg0._M_rep()._M_capacity</span><br><span class="line">printf <span class="string">"WString ref-count \t= %d\n"</span>, $arg0._M_rep()._M_refcount</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">document pwstring</span><br><span class="line">Prints std::wstring information.</span><br><span class="line">Syntax: pwstring &lt;wstring&gt;</span><br><span class="line">Example:</span><br><span class="line">pwstring s - Prints content, size/length, capacity <span class="keyword">and</span> ref-count of wstring s</span><br><span class="line">end </span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># C++ related beautifiers (optional)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">set <span class="keyword">print</span> pretty on</span><br><span class="line">set <span class="keyword">print</span> object on</span><br><span class="line">set <span class="keyword">print</span> static-members on</span><br><span class="line">set <span class="keyword">print</span> vtbl on</span><br><span class="line">set <span class="keyword">print</span> demangle on</span><br><span class="line">set demangle-style gnu-v3</span><br><span class="line">set <span class="keyword">print</span> sevenbit-strings off</span><br></pre></td></tr></table></figure><h4 id="gdb-testing-example"><a href="#gdb-testing-example" class="headerlink" title="gdb testing example"></a><code>gdb</code> testing example</h4><p><strong>example code</strong></p>   <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///  vector_test.cc</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Create a vector containing integers</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v = &#123;<span class="number">7</span>, <span class="number">5</span>, <span class="number">16</span>, <span class="number">8</span>&#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Add two more integers to vector</span></span><br><span class="line">    v.push_back(<span class="number">25</span>);</span><br><span class="line">    v.push_back(<span class="number">13</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Iterate and print values of vector</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> n : v) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>compile it and debug using </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g++ vector_test.cc -std=c++11 -g</span><br><span class="line">gdb a.out</span><br></pre></td></tr></table></figure><p><strong><code>gdb</code> console</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(gdb) b 9</span><br><span class="line">(gdb) layout src<span class="comment"># set source code layout(TUI mode)</span></span><br><span class="line">(gdb) r</span><br><span class="line">(gdb) pvector v<span class="comment"># print all the vector elements</span></span><br><span class="line">(gdb) n</span><br><span class="line">(gdb) n</span><br><span class="line">(gdb) pvector v 4 5      <span class="comment"># check v[4] v[5]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Translation]Design is refactoring-The Lifetime of Food</title>
      <link href="/2019/03/06/The%20Lifetime%20of%20Food%20-%20Design%20is%20Refactoring/"/>
      <url>/2019/03/06/The%20Lifetime%20of%20Food%20-%20Design%20is%20Refactoring/</url>
      
        <content type="html"><![CDATA[<h2 id="Design-is-Refactoring-The-Lifetime-of-Food"><a href="#Design-is-Refactoring-The-Lifetime-of-Food" class="headerlink" title="Design is Refactoring-The Lifetime of Food"></a><a href="http://designisrefactoring.com/2016/08/10/the-lifetime-of-food/" target="_blank" rel="noopener">Design is Refactoring-The Lifetime of Food</a></h2><p>A Rusty Analogy using Millennial Stereotypes</p><p>Imagine you are out to dinner with some friends. You  are all stereotypical Millennials so photographing your meal is  expected. For every dish you order each of your friends borrows it,  takes a photograph, and then returns it to you.</p><p>Well, that’s the plan anyway. Some of your friends are not the most  reliable. Will they always return the right dish to you? Will they try  to sneak a bite? Human friends are so unreliable. But if your friends  were Rust functions you’d have nothing to worry about, thanks to Rust’s  rules around borrowing and lifetimes.<br><a id="more"></a></p><blockquote><p>想象一下，你准备和几个朋友一起去外面吃饭，你们都是典型的<a href="https://baike.baidu.com/item/%E5%8D%83%E7%A6%A7%E4%B8%80%E4%BB%A3/2683826?fr=aladdin" target="_blank" rel="noopener">千禧年一代</a>，所以拍照是意料之中的事情。对于你点的每一道菜，他们都会拿过去拍一张， 然后再还给你。</p><p>好了，这就是所谓的计划。他们之中有几个不是非常的靠得住，他们一定要把你点的还回来么?他们会吃掉几口么？人类的朋友不是非常可靠的。但是如果你的朋友是<code>Rust functions</code>,  那你就不用担心啦，这要感谢<code>Rust</code>围绕<strong>借</strong>的规则和<strong>生命周期</strong>规则。</p></blockquote><p>Let’s model this dinner party in Rust and see if we can learn a thing or two about borrowing and lifetimes.</p><p>We’ll start off with the basics, a Dish that can be photographed.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dish</span></span> &#123;</span><br><span class="line">    name: <span class="built_in">String</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Dish &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">photograph</span></span>(&amp;<span class="keyword">self</span>, photographer: &amp;<span class="built_in">str</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Snap! &#123;&#125; photographed by &#123;&#125;"</span>, <span class="keyword">self</span>.name, photographer)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> doro = Dish &#123; name: <span class="built_in">String</span>::from(<span class="string">"Doro Wat"</span>) &#125;;</span><br><span class="line">    <span class="keyword">let</span> bruschetta = Dish &#123; name: <span class="built_in">String</span>::from(<span class="string">"Bruschetta"</span>) &#125;;</span><br><span class="line"></span><br><span class="line">    doro.photograph(<span class="string">"Me"</span>);</span><br><span class="line">    bruschetta.photograph(<span class="string">"Me"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.rust-lang.org/?code=struct+Dish+%7B%0A++++name%3A+String%2C%0A%7D%0A%0Aimpl+Dish+%7B%0A++++fn+photograph%28%26self%2C+photographer%3A+%26str%29+%7B%0A++++++++println%21%28%22Snap%21+%7B%7D+photographed+by+%7B%7D%22%2C+self.name%2C+photographer%29%0A++++%7D%0A%7D%0A%0Afn+main%28%29+%7B%0A++++let+doro+%3D+Dish+%7B+name%3A+String%3A%3Afrom%28%22Doro+Wat%22%29+%7D%3B%0A++++let+bruschetta+%3D+Dish+%7B+name%3A+String%3A%3Afrom%28%22Bruschetta%22%29+%7D%3B%0A%0A++++doro.photograph%28%22Me%22%29%3B%0A++++bruschetta.photograph%28%22Me%22%29%3B%0A%7D" target="_blank" rel="noopener">Run</a></p><p>We have a <code>Dish</code> struct which contains a name. There’s one function on <code>Dish</code>, <code>photograph</code>. You get your dishes from the hot new Italian/Ethiopian fusion restaurant and take their pictures.</p><p>Let’s introduce one of your friends. We’ll start off with your most  honest and trustworthy companion. Being honest this friend wants to  borrow a dish photograph it and return it. They don’t want you giving  them more than one dish – that could get confusing! When converted to a  Rust function, this friend looks like:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">honest_friend</span></span>(dish: &amp;Dish) &#123;</span><br><span class="line">  dish.photograph(<span class="string">"Honest Friend"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Our dinner-party now looks like:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dish</span></span> &#123;</span><br><span class="line">    name: <span class="built_in">String</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Dish &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">photograph</span></span>(&amp;<span class="keyword">self</span>, photographer: &amp;<span class="built_in">str</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Snap! &#123;&#125; photographed by &#123;&#125;"</span>, <span class="keyword">self</span>.name, photographer)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">honest_friend</span></span>(dish: &amp;Dish) &#123;</span><br><span class="line">    dish.photograph(<span class="string">"Honest Friend"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> doro = Dish &#123; name: <span class="built_in">String</span>::from(<span class="string">"Doro Wat"</span>) &#125;;</span><br><span class="line">    <span class="keyword">let</span> bruschetta = Dish &#123; name: <span class="built_in">String</span>::from(<span class="string">"Bruschetta"</span>) &#125;;</span><br><span class="line"></span><br><span class="line">    honest_friend(&amp;doro);</span><br><span class="line">    honest_friend(&amp;bruschetta);</span><br><span class="line"></span><br><span class="line">    doro.photograph(<span class="string">"Me"</span>);</span><br><span class="line">    bruschetta.photograph(<span class="string">"Me"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.rust-lang.org/?code=struct+Dish+%7B%0A++++name%3A+String%2C%0A%7D%0A%0Aimpl+Dish+%7B%0A++++fn+photograph%28%26self%2C+photographer%3A+%26str%29+%7B%0A++++++++println%21%28%22Snap%21+%7B%7D+photographed+by+%7B%7D%22%2C+self.name%2C+photographer%29%0A++++%7D%0A%7D%0A%0Afn+honest_friend%28dish%3A+%26Dish%29+%7B%0A++++dish.photograph%28%22Honest+Friend%22%29%3B%0A%7D%0A%0Afn+main%28%29+%7B%0A++++let+doro+%3D+Dish+%7B+name%3A+String%3A%3Afrom%28%22Doro+Wat%22%29+%7D%3B%0A++++let+bruschetta+%3D+Dish+%7B+name%3A+String%3A%3Afrom%28%22Bruschetta%22%29+%7D%3B%0A%0A++++honest_friend%28%26doro%29%3B%0A++++honest_friend%28%26bruschetta%29%3B%0A%0A++++doro.photograph%28%22Me%22%29%3B%0A++++bruschetta.photograph%28%22Me%22%29%3B%0A%7D" target="_blank" rel="noopener">Run</a></p><p>Note that your friend is not explicitly returning the Dish at the end  of their function. Thanks to Rust’s borrowing rules they don’t have to.  When your friend’s scope ends, the borrow ends.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">honest_friend</span></span>(dish: &amp;Dish) &#123;      <span class="comment">//-- Borrow of the dish begins here</span></span><br><span class="line">  dish.photograph(<span class="string">"Honest Friend"</span>)   <span class="comment">// |</span></span><br><span class="line">&#125;                                   <span class="comment">//-- Borrow of the dish ends here</span></span><br></pre></td></tr></table></figure><p>A new friend joins your table. This friend likes to play pranks, but  they don’t always go as expected. Your Trickster Friend says, “Loan me a  dish and I’ll give you a dish back. Trust me, I’m going to return to  you the same dish you loaned me.” You have your doubts.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">trickster_friend</span></span>(dish: &amp;Dish) -&gt; &amp;Dish &#123;</span><br><span class="line">    dish.photograph(<span class="string">"Incompenent Friend"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Tricks and Pranks ensue</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Is this really the same dish you loaned?</span></span><br><span class="line">    mystery_dish</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dish</span></span> &#123;</span><br><span class="line">    name: <span class="built_in">String</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Dish &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">photograph</span></span>(&amp;<span class="keyword">self</span>, photographer: &amp;<span class="built_in">str</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Snap! &#123;&#125; photographed by &#123;&#125;"</span>, <span class="keyword">self</span>.name, photographer)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">trickster_friend</span></span>(dish: &amp;Dish) -&gt; &amp;Dish &#123;</span><br><span class="line">    dish.photograph(<span class="string">"Trickster Friend"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Your friend is either returning the same dish or a different one.</span></span><br><span class="line">    <span class="comment">// Try running both options by uncommenting the assignments of mystery_dish</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Option One: Returning a different one</span></span><br><span class="line">    <span class="comment">// let mystery_dish = &amp;Dish &#123; name: String::from("Pad Thai") &#125;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Option Two: Returning the same one</span></span><br><span class="line">    <span class="comment">// let mystery_dish = dish;</span></span><br><span class="line"></span><br><span class="line">    mystery_dish</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> doro = Dish &#123; name: <span class="built_in">String</span>::from(<span class="string">"Doro Wat"</span>) &#125;;</span><br><span class="line">    <span class="keyword">let</span> bruschetta = Dish &#123; name: <span class="built_in">String</span>::from(<span class="string">"Bruschetta"</span>) &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> mystery_dish = trickster_friend(&amp;doro); </span><br><span class="line"></span><br><span class="line">    mystery_dish.photograph(<span class="string">"Me"</span>);</span><br><span class="line">    bruschetta.photograph(<span class="string">"Me"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.rust-lang.org/?code=struct+Dish+%7B%0A++++name%3A+String%2C%0A%7D%0A%0Aimpl+Dish+%7B%0A++++fn+photograph%28%26self%2C+photographer%3A+%26str%29+%7B%0A++++++++println%21%28%22Snap%21+%7B%7D+photographed+by+%7B%7D%22%2C+self.name%2C+photographer%29%0A++++%7D%0A%7D%0A%0Afn+trickster_friend%28dish%3A+%26Dish%29+-%3E+%26Dish+%7B%0A++++dish.photograph%28%22Trickster+Friend%22%29%3B%0A%0A++++%2F%2F+Your+friend+is+either+returning+the+same+dish+or+a+different+one.%0A++++%2F%2F+Try+running+both+options+by+uncommenting+the+assignments+of+mystery_dish%0A%0A++++%2F%2F+Option+One%3A+Returning+a+different+one%0A++++%2F%2F+let+mystery_dish+%3D+%26Dish+%7B+name%3A+String%3A%3Afrom%28%22Pad+Thai%22%29+%7D%3B%0A%0A++++%2F%2F+Option+Two%3A+Returning+the+same+one%0A++++%2F%2F+let+mystery_dish+%3D+dish%3B%0A%0A++++mystery_dish%0A%7D%0A%0Afn+main%28%29+%7B%0A++++let+doro+%3D+Dish+%7B+name%3A+String%3A%3Afrom%28%22Doro+Wat%22%29+%7D%3B%0A++++let+bruschetta+%3D+Dish+%7B+name%3A+String%3A%3Afrom%28%22Bruschetta%22%29+%7D%3B%0A%0A++++let+mystery_dish+%3D+trickster_friend%28%26doro%29%3B+%0A%0A++++mystery_dish.photograph%28%22Me%22%29%3B%0A++++bruschetta.photograph%28%22Me%22%29%3B%0A%7D" target="_blank" rel="noopener">Run</a></p><p>Try both options and you’ll see that your trickster friend can not  prank you by giving you Pad Thai. The Pad Thai value is owned inside <code>trickster_friend</code> and is destroyed when <code>trickster_friend</code> ends. This is a bit easier to see if you inline the <code>trickster_friend</code> function into your <code>main</code> function</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> doro = Dish &#123; name: <span class="built_in">String</span>::from(<span class="string">"Doro Wat"</span>) &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> mystery_meal = &#123;                                          <span class="comment">//-- Mystery Meal is created here </span></span><br><span class="line">      <span class="keyword">let</span> other_dish = &amp;Dish &#123; name: <span class="built_in">String</span>::from(<span class="string">"Pad Thai"</span>) &#125;;  <span class="comment">// |  //-- Pad Thai is created here</span></span><br><span class="line">      other_dish                                                  <span class="comment">// |     |</span></span><br><span class="line">    &#125;                                                             <span class="comment">// |  //-- Pad Thai is destroyed here</span></span><br><span class="line">                                                                  <span class="comment">// |</span></span><br><span class="line">    me(mystery_meal)                                              <span class="comment">//-- Mystery meal lives for longer than Pad Thai,</span></span><br><span class="line">                                                                  <span class="comment">//   so it can't contain a reference to Pad Thai. </span></span><br><span class="line">                                                                  <span class="comment">//   Compiler Error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Our trickster friend shows us that if a function is going to receive and return a single borrowed reference it <em>has</em> to return the same reference it received. Even though our friend’s tricky plan failed we learned something from it!</p><p>A third, very impatient friend arrives to our party. They don’t have  time for this “one plate at a time” nonsense; this friend wants you to  loan them two dishes at once:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">impatient_friend</span></span>(first_dish: &amp;Dish, second_dish: &amp;Dish) &#123;</span><br><span class="line">    first_dish.photograph(<span class="string">"Impatient Friend"</span>);</span><br><span class="line">    second_dish.photograph(<span class="string">"Impatient Friend"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dish</span></span> &#123;</span><br><span class="line">    name: <span class="built_in">String</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Dish &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">photograph</span></span>(&amp;<span class="keyword">self</span>, photographer: &amp;<span class="built_in">str</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Snap! &#123;&#125; photographed by &#123;&#125;"</span>, <span class="keyword">self</span>.name, photographer)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">impatient_friend</span></span>(first_dish: &amp;Dish, second_dish: &amp;Dish) &#123;</span><br><span class="line">    first_dish.photograph(<span class="string">"Impatient Friend"</span>);</span><br><span class="line">    second_dish.photograph(<span class="string">"Impatient Friend"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> doro = Dish &#123; name: <span class="built_in">String</span>::from(<span class="string">"Doro Wat"</span>) &#125;;</span><br><span class="line">    <span class="keyword">let</span> bruschetta = Dish &#123; name: <span class="built_in">String</span>::from(<span class="string">"Bruschetta"</span>) &#125;;</span><br><span class="line"></span><br><span class="line">    impatient_friend(&amp;doro, &amp;bruschetta);</span><br><span class="line"></span><br><span class="line">    doro.photograph(<span class="string">"Me"</span>);</span><br><span class="line">    bruschetta.photograph(<span class="string">"Me"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.rust-lang.org/?code=struct+Dish+%7B%0A++++name%3A+String%2C%0A%7D%0A%0Aimpl+Dish+%7B%0A++++fn+photograph%28%26self%2C+photographer%3A+%26str%29+%7B%0A++++++++println%21%28%22Snap%21+%7B%7D+photographed+by+%7B%7D%22%2C+self.name%2C+photographer%29%0A++++%7D%0A%7D%0A%0Afn+impatient_friend%28first_dish%3A+%26Dish%2C+second_dish%3A+%26Dish%29+%7B%0A++++first_dish.photograph%28%22Impatient+Friend%22%29%3B%0A++++second_dish.photograph%28%22Impatient+Friend%22%29%3B%0A%7D%0A%0Afn+main%28%29+%7B%0A++++let+doro+%3D+Dish+%7B+name%3A+String%3A%3Afrom%28%22Doro+Wat%22%29+%7D%3B%0A++++let+bruschetta+%3D+Dish+%7B+name%3A+String%3A%3Afrom%28%22Bruschetta%22%29+%7D%3B%0A%0A++++impatient_friend%28%26doro%2C+%26bruschetta%29%3B%0A%0A++++doro.photograph%28%22Me%22%29%3B%0A++++bruschetta.photograph%28%22Me%22%29%3B%0A%7D" target="_blank" rel="noopener">Run</a></p><p>Just as with your honest friend, this works fine. We loan our two dishes to our impatient friend who takes their photos. When <code>impatient_friend</code> ends, so do the borrows.</p><p>But your trickster friend sees this exchange and gets an idea. They  now know that they can’t return a plate of Pad Thai, but they figure  that if they borrow 2 plates and only return one, they can keep that  extra plate for themselves.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dish</span></span> &#123;</span><br><span class="line">    name: <span class="built_in">String</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Dish &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">photograph</span></span>(&amp;<span class="keyword">self</span>, photographer: &amp;<span class="built_in">str</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Snap! &#123;&#125; photographed by &#123;&#125;"</span>, <span class="keyword">self</span>.name, photographer)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">trickster_friend_again</span></span>(first_dish: &amp;Dish, second_dish: &amp;Dish) -&gt; &amp;Dish &#123;</span><br><span class="line">    first_dish.photograph(<span class="string">"Trickster Friend"</span>);</span><br><span class="line">    second_dish.photograph(<span class="string">"Trickster Friend"</span>);</span><br><span class="line"></span><br><span class="line">    first_dish</span><br><span class="line">    <span class="comment">//ha hah hah, I get to keep the second dish!</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> doro = Dish &#123; name: <span class="built_in">String</span>::from(<span class="string">"Doro Wat"</span>) &#125;;</span><br><span class="line">    <span class="keyword">let</span> bruschetta = Dish &#123; name: <span class="built_in">String</span>::from(<span class="string">"Bruschetta"</span>) &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> mystery_meal = trickster_friend_again(&amp;doro, &amp;bruschetta);</span><br><span class="line"></span><br><span class="line">    mystery_meal.photograph(<span class="string">"Me!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.rust-lang.org/?code=struct+Dish+%7B%0A++++name%3A+String%2C%0A%7D%0A%0Aimpl+Dish+%7B%0A++++fn+photograph%28%26self%2C+photographer%3A+%26str%29+%7B%0A++++++++println%21%28%22Snap%21+%7B%7D+photographed+by+%7B%7D%22%2C+self.name%2C+photographer%29%0A++++%7D%0A%7D%0A%0Afn+trickster_friend_again%28first_dish%3A+%26Dish%2C+second_dish%3A+%26Dish%29+-%3E+%26Dish+%7B%0A++++first_dish.photograph%28%22Trickster+Friend%22%29%3B%0A++++second_dish.photograph%28%22Trickster+Friend%22%29%3B%0A%0A++++first_dish%0A++++%2F%2Fha+hah+hah%2C+I+get+to+keep+the+second+dish%21%0A%7D%0A%0Afn+main%28%29+%7B%0A++++let+doro+%3D+Dish+%7B+name%3A+String%3A%3Afrom%28%22Doro+Wat%22%29+%7D%3B%0A++++let+bruschetta+%3D+Dish+%7B+name%3A+String%3A%3Afrom%28%22Bruschetta%22%29+%7D%3B%0A%0A++++let+mystery_meal+%3D+trickster_friend_again%28%26doro%2C+%26bruschetta%29%3B%0A%0A++++mystery_meal.photograph%28%22Me%21%22%29%3B%0A%7D" target="_blank" rel="noopener">Run</a></p><p>Foiled again! If you run that you’ll get <code>error: missing lifetime specifier</code>.</p><p>Remember what we first learned from our Trickster Friend? If a  function receives and returns a single reference then it must be the  same reference, otherwise you could return something that does not live  long enough. That’s easy for the Rust compiler to check as there’s only  one option. But this function receives two references and returns one.  How does the compiler ensure that the reference you return points to a  value that lives long enough?</p><p>In this particular code both our values – <code>doro</code> and <code>bruschetta</code> – live long enough. So it can be hard to see why the Rust compiler is confused. But what if we changed our code to:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> doro = Dish &#123; name: <span class="built_in">String</span>::from(<span class="string">"Doro Wat"</span>) &#125;;</span><br><span class="line">    <span class="keyword">let</span> bruschetta = Dish &#123; name: <span class="built_in">String</span>::from(<span class="string">"Bruschetta"</span>) &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> mystery_meal = &#123;</span><br><span class="line">      <span class="keyword">let</span> herring = Dish &#123; name: <span class="built_in">String</span>::from(<span class="string">"Pickled Herring"</span>) &#125;;   <span class="comment">//-- Herring created here</span></span><br><span class="line">      trickster_friend_again(&amp;herring, &amp;bruschetta)                   <span class="comment">// |</span></span><br><span class="line">    &#125;                                                                 <span class="comment">//-- Herring destroyed here</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    mystery_meal.photograph(<span class="string">"Me!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If <code>trickster_friend_again</code> returns <code>bruschetta</code> then that code would be fine. But if it returns <code>herring</code> we’d try to photograph a dish that no longer existed. This is unsafe, so Rust won’t let us do it.</p><p>If the Rust compiler ever has any questions about what reference a  function will return then that function must explicitly declare a  lifetime. Our trickster friend could declare one of four lifetimes:</p><p>Option One:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">trickster_friend_option_one</span></span>&lt;<span class="symbol">'a</span>&gt;(first_dish: &amp;<span class="symbol">'a</span> Dish, second_dish: &amp;Dish) -&gt; &amp;<span class="symbol">'a</span> Dish</span><br></pre></td></tr></table></figure><p>Option Two:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">trickster_friend_option_two</span></span>&lt;<span class="symbol">'a</span>&gt;(first_dish: &amp;Dish, second_dish: &amp;<span class="symbol">'a</span> Dish) -&gt; &amp;<span class="symbol">'a</span> Dish</span><br></pre></td></tr></table></figure><p>Option Three:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">trickster_friend_option_three</span></span>&lt;<span class="symbol">'a</span>&gt;(first_dish: &amp;<span class="symbol">'a</span> Dish, second_dish: &amp;<span class="symbol">'a</span> Dish) -&gt; &amp;<span class="symbol">'a</span> Dish</span><br></pre></td></tr></table></figure><p>Option Four:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">trickster_friend_option_four</span></span>&lt;<span class="symbol">'a</span>, <span class="symbol">'b</span>&gt;(first_dish: &amp;<span class="symbol">'a</span> Dish, second_dish: &amp;<span class="symbol">'b</span> Dish) -&gt; &amp;<span class="symbol">'a</span> Dish</span><br></pre></td></tr></table></figure><p>Let’s see the differences between those options:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dish</span></span> &#123;</span><br><span class="line">    name: <span class="built_in">String</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Dish &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">photograph</span></span>(&amp;<span class="keyword">self</span>, photographer: &amp;<span class="built_in">str</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Snap! &#123;&#125; photographed by &#123;&#125;"</span>, <span class="keyword">self</span>.name, photographer)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">trickster_friend_lifetime_one</span></span>&lt;<span class="symbol">'a</span>&gt;(first_dish: &amp;<span class="symbol">'a</span> Dish, second_dish: &amp;Dish) -&gt; &amp;<span class="symbol">'a</span> Dish &#123;</span><br><span class="line">    first_dish.photograph(<span class="string">"Trickster Friend"</span>);</span><br><span class="line">    second_dish.photograph(<span class="string">"Trickster Friend"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Uncomment below to try to return second_dish</span></span><br><span class="line">    <span class="comment">//second_dish</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Comment this out when you try to return second_dish</span></span><br><span class="line">    first_dish</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> doro = Dish &#123; name: <span class="built_in">String</span>::from(<span class="string">"Doro Wat"</span>) &#125;;</span><br><span class="line">    <span class="keyword">let</span> bruschetta = Dish &#123; name: <span class="built_in">String</span>::from(<span class="string">"Bruschetta"</span>) &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> mystery_meal = trickster_friend_lifetime_one(&amp;doro, &amp;bruschetta);</span><br><span class="line"></span><br><span class="line">    mystery_meal.photograph(<span class="string">"Me!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.rust-lang.org/?code=struct+Dish+%7B%0A++++name%3A+String%2C%0A%7D%0A%0Aimpl+Dish+%7B%0A++++fn+photograph%28%26self%2C+photographer%3A+%26str%29+%7B%0A++++++++println%21%28%22Snap%21+%7B%7D+photographed+by+%7B%7D%22%2C+self.name%2C+photographer%29%0A++++%7D%0A%7D%0A%0Afn+trickster_friend_lifetime_one%3C%27a%3E%28first_dish%3A+%26%27a+Dish%2C+second_dish%3A+%26Dish%29+-%3E+%26%27a+Dish+%7B%0A++++first_dish.photograph%28%22Trickster+Friend%22%29%3B%0A++++second_dish.photograph%28%22Trickster+Friend%22%29%3B%0A%0A++++%2F%2FUncomment+below+to+try+to+return+second_dish%0A++++%2F%2Fsecond_dish%0A%0A++++%2F%2FComment+this+out+when+you+try+to+return+second_dish%0A++++first_dish%0A%7D%0A%0Afn+main%28%29+%7B%0A++++let+doro+%3D+Dish+%7B+name%3A+String%3A%3Afrom%28%22Doro+Wat%22%29+%7D%3B%0A++++let+bruschetta+%3D+Dish+%7B+name%3A+String%3A%3Afrom%28%22Bruschetta%22%29+%7D%3B%0A%0A++++let+mystery_meal+%3D+trickster_friend_lifetime_one%28%26doro%2C+%26bruschetta%29%3B%0A%0A++++mystery_meal.photograph%28%22Me%21%22%29%3B%0A%7D" target="_blank" rel="noopener">Run</a></p><p>In this example we’ve declared one lifetime, given it to the reference passed to <code>first_dish</code> and our return value. Trickster friend now <em>must</em> return first_dish.</p><p>Let’s try the <code>herring</code> code again:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">trickster_friend_lifetime_one</span></span>&lt;<span class="symbol">'a</span>&gt;(first_dish: &amp;<span class="symbol">'a</span> Dish, second_dish: &amp;Dish) -&gt; &amp;<span class="symbol">'a</span> Dish &#123;</span><br><span class="line">    first_dish</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> doro = Dish &#123; name: <span class="built_in">String</span>::from(<span class="string">"Doro Wat"</span>) &#125;;</span><br><span class="line">    <span class="keyword">let</span> bruschetta = Dish &#123; name: <span class="built_in">String</span>::from(<span class="string">"Bruschetta"</span>) &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> mystery_meal = &#123;</span><br><span class="line">      <span class="keyword">let</span> herring = Dish &#123; name: <span class="built_in">String</span>::from(<span class="string">"Pickled Herring"</span>) &#125;;   <span class="comment">//-- Herring created here</span></span><br><span class="line">      trickster_friend_lifetime_one(&amp;doro, &amp;herring)                  <span class="comment">// |  this will always return doro</span></span><br><span class="line">    &#125;                                                                 <span class="comment">//-- Herring destroyed here</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    mystery_meal.photograph(<span class="string">"Me!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using our current Trickster Friend this code will compile, because there is no way that <code>mystery_meal</code> will ever be <code>herring</code>.</p><p>Option Two is the inverse of Option One. The function must now return the <code>second_dish</code>. If we pass in <code>herring</code> as the first dish, our code still runs.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">trickster_friend_option_two</span></span>&lt;<span class="symbol">'a</span>&gt;(first_dish: &amp;Dish, second_dish: &amp;<span class="symbol">'a</span> Dish) -&gt; &amp;<span class="symbol">'a</span> Dish &#123;</span><br><span class="line">  second_dish</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> doro = Dish &#123; name: <span class="built_in">String</span>::from(<span class="string">"Doro Wat"</span>) &#125;;</span><br><span class="line">    <span class="keyword">let</span> bruschetta = Dish &#123; name: <span class="built_in">String</span>::from(<span class="string">"Bruschetta"</span>) &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> mystery_meal = &#123;</span><br><span class="line">      <span class="keyword">let</span> herring = Dish &#123; name: <span class="built_in">String</span>::from(<span class="string">"Pickled Herring"</span>) &#125;;   <span class="comment">//-- Herring created here</span></span><br><span class="line">      trickster_friend_lifetime_two(&amp;herring, &amp;doro)                  <span class="comment">// |   this will always return &amp;doro</span></span><br><span class="line">    &#125;                                                                 <span class="comment">//-- Herring destroyed here</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    mystery_meal.photograph(<span class="string">"Me!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Option Three gives the same lifetime to both parameters so the  function could return either of them. Our herring code will fail to  compile regardless of parameter order because <code>mystery_meal</code> could be bound to a destroyed value.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">trickster_friend_option_three</span></span>&lt;<span class="symbol">'a</span>&gt;(first_dish: &amp;<span class="symbol">'a</span> Dish, second_dish: &amp;<span class="symbol">'a</span> Dish) -&gt; &amp;<span class="symbol">'a</span> Dish &#123;</span><br><span class="line">  <span class="comment">// logic to determine if first_dish or second_dish is returned</span></span><br><span class="line">  dish_to_return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> doro = Dish &#123; name: <span class="built_in">String</span>::from(<span class="string">"Doro Wat"</span>) &#125;;</span><br><span class="line">    <span class="keyword">let</span> bruschetta = Dish &#123; name: <span class="built_in">String</span>::from(<span class="string">"Bruschetta"</span>) &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> mystery_meal = &#123;</span><br><span class="line">      <span class="keyword">let</span> herring = Dish &#123; name: <span class="built_in">String</span>::from(<span class="string">"Pickled Herring"</span>) &#125;;   <span class="comment">//-- Herring created here</span></span><br><span class="line">      trickster_friend_lifetime_three(&amp;herring, &amp;doro)                <span class="comment">// |   this could return doro or herring</span></span><br><span class="line">    &#125;                                                                 <span class="comment">//-- Herring destroyed here</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    mystery_meal.photograph(<span class="string">"Me!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In our dinner party Option Four is functionally the same as Option  One. We’ve declared two lifetimes but we’re never using the second one  making it irrelevant. I’m sure there are times when having two lifetimes  on a function is useful, but I haven’t come across them. <a href="https://doc.rust-lang.org/book/lifetimes.html#multiple-lifetimes" target="_blank" rel="noopener">The book says you can have multiple lifetimes, but don’t explain why</a>. I’d love to know more about this.</p><p>Is there more to lifetimes than this? Almost certainly. But I hope  that this analogy helps you grasp the fundamentals of why Rust has  lifetimes. If you want to learn more about fundamentals of Rust, maybe  read one of my earlier posts, <a href="http://designisrefactoring.com/2016/04/01/rust-via-its-core-values/" target="_blank" rel="noopener">Rust via its Core Values</a>. I also suggest the <a href="http://www.newrustacean.com/" target="_blank" rel="noopener">New Rustacean</a> podcast, which has helped me understand quite a lot about Rust.</p>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>What I Have Learnt From the Dissertation of Danqi</title>
      <link href="/2019/03/03/What%20I%20have%20learnt%20from%20the%20Dissertation%20of%20Danqi/"/>
      <url>/2019/03/03/What%20I%20have%20learnt%20from%20the%20Dissertation%20of%20Danqi/</url>
      
        <content type="html"><![CDATA[<h2 id="What-I-have-learnt-from-the-dissertation-of-Danqi"><a href="#What-I-have-learnt-from-the-dissertation-of-Danqi" class="headerlink" title="What I have learnt from the dissertation of Danqi"></a>What I have learnt from the dissertation of Danqi</h2><p>Not many doctors’ dissertations could be big bang, but <a href="https://github.com/danqi" target="_blank" rel="noopener">Danqi Chen</a>‘s did. Recently, the doctor from Stanford NLP Group has attracted a lot of attention, including my friends and me.</p><p>The library of Stanford said her doctor dissertation named <a href="https://stacks.stanford.edu/file/druid:gd576xb1833/thesis-augmented.pdf" target="_blank" rel="noopener">Neural Reading Comprehension and Beyond</a> that reaches 156 pages had been read over 1,000 times in four days, since it was uploaded, which has becoming the most popular dissertation for doctor degree in recent decade.</p><p>And here I am writing what I have learnt from it.</p><a id="more"></a><h3 id="Why-this-paper"><a href="#Why-this-paper" class="headerlink" title="Why this paper"></a>Why this paper</h3><p>I decided to write something about my daily learning and thinking down when I realized that did not keep doing it in the notebook or on my blog.</p><p>Actual, I have completed the course <a href="http://www.xuetangx.com/courses/course-v1:Tsinghua+20150001+sp/about" target="_blank" rel="noopener"><strong>how to write a good research paper</strong></a> and got a <strong>excellent</strong> grade, which was encouraged from <a href="https://github.com/zhuli19901106" target="_blank" rel="noopener">Li ZHU</a>，Siraj , etc. And then I am looking for some papers to learn something fresh and hope to try a new era. I downloaded some about cyber security but no one about artificial intelligence until I met Danqi’s, which could be a perfect example on how to write a good research paper in my mind.</p><h3 id="What-it-is-about"><a href="#What-it-is-about" class="headerlink" title="What it is about"></a>What it is about</h3><p>The paper is trying to build computer systems to read a passage of text and answer comprehension questions by focusing on neural reading comprehension. It consists of two parts: the first one is called foundations to tell readers an overview of reading comprehension and her group’s effort of their models which understands what they have actually learned, more of that, they summarized recent advances and discussed future directions and open questions in that field; the second one is called applications to tell readers two new directions they pioneered: 1)how they can combine information retrieval techs with neural reading comprehension to tackle large-scale open-domain question answering; and 2)how they can build conversational question answering systems form current single-turn, span-based reading comprehension models, what’s more, they implemented those ideas in the DrQA and CoQA projects and they demonstrate the effectiveness of those approaches.</p><h3 id="Who-is-Danqi-Chen"><a href="#Who-is-Danqi-Chen" class="headerlink" title="Who is Danqi Chen"></a>Who is Danqi Chen</h3><p><a href="https://cs.stanford.edu/~danqi/" target="_blank" rel="noopener">She</a> graduated from Yao class of Tsinghua university in 2012. During the time, she won the silver medal in the world final of ACM/ICPC. </p><p>Before going to Tsinghua, she studied in <a href="https://en.wikipedia.org/wiki/Yali_High_School" target="_blank" rel="noopener">Yali</a> Changsha, in which she presented <a href="https://cs.stanford.edu/~danqi/misc/dynamic-programming.pdf" target="_blank" rel="noopener">plug-like dynamic programming</a> and <a href="https://cs.stanford.edu/~danqi/misc/divide-and-conquer.pdf" target="_blank" rel="noopener">CDQ’s divide-and-conquer</a> .</p><p>After studying in Tsinghua, she went to Stanford. Now she currently visiting Facebook AI Research (Seattle) and University of Washington. And she will be joining the Computer Science Department at Princeton University as an<br>assistant professor in Fall 2019.</p><h3 id="What-I-have-learnt"><a href="#What-I-have-learnt" class="headerlink" title="What I have learnt"></a>What I have learnt</h3><p>Specifically, what impressed me most, firstly, is understanding Reading Comprehension from a fool computer view, </p><blockquote><p>Alyssa got to the beach after a long trip, She’s from Charlotte. She traveled from Atlanta. She’s now in Miami. She went to Miami to visit some friends. But she wanted some time to herself at the beach, so she went there first. After going swimming and laying out, she went to her friend Ellen’s house. Ellen greeted Alyssa and they both had some lemonade to drink. Alyssa called her friends Kristen and Rachel to meet at Ellen’s house. The girls traded stories and caught up on their lives. It was a happy time for everyone. The girls went to a restaurant for dinner. The restaurant had a special on catfish. Alyssa enjoyed the restaurant’s special. Ellen ordered a salad. Kristen had soup.Rachel had a steak. After eating, the ladies went back to Ellen’s house to have fun. The had lots of fun. They stayed the night because they were tired. Alyssa was happy to spend time with her friend again.</p><ul><li>Question: What city is Alyssa in?</li><li>Answer: Miami</li><li>Quesion: what did Alyssa eat at the restaurant?</li><li>Answer: catfish</li><li>Question: How may friends does Alyssa have in this story?</li><li>Answer: 3</li></ul></blockquote><p>so how many steps should a machine process before answer the above questions?</p><blockquote><ul><li>part-of-speech tagging. It requires our machines to understand that, for example, in the first sentence <em>Alyssa got to the beach after a long trip.</em>, <em>Alyssa</em> is a proper noun, <em>beach</em> and <em>trip</em> are common nouns. <em>got</em> is a verb in its past tense, <em>long</em> is an adjective, <em>after</em> is a preposition.</li><li>named entity recognition. Our machines also should understand that <em>Alyssa</em>, <em>Ellen</em>, <em>Kristen</em> are the names of people in the story while <em>Charlotte</em>, <em>Atlanta</em> and <em>Miami</em> are the names of locations.</li><li>syntactic parsing. To understand the meaning of each single sentence, our machines also need to understand the relationship between words, or the syntactical (grammatical) structure. Taking the first sentence <em>Alyssa got to the beach after a long trip.</em> as an example again, the machines should understand that <em>Alyssa</em> is the subject, and <em>beach</em> is object of the verb <em>got</em>, while <em>after a long trip</em> as a whole is a prepositional phrase which describes a temporal relationship with the verb.</li><li>coreference resolution. Furthermore, our machines even need to understand the interplay between sentences. For example, the mention <em>She</em> in the sentence <em>She’s now in Miami</em> refers to <em>Alyssa</em> mentioned in the first sentence, while the mention <em>The girls</em> refers to <em>Alyssa, Ellen, Kristen and Rachel</em> in the previous sentences.</li></ul></blockquote><p>I did a lot of reading comprehensions during the school time, both English and Chinese class, but I have never thought them from the view like this even when I prepared the examinations in high school. Actually, it works effectively when learning a new language, and I would like to try it when I learn my third language. Still now, I have to read a lot of papers and blogs from the Internet, I got suck sometime when they were not tiny or simple. </p><p>So secondly, what I learnt from it is that to try to write things down in simple way, which is what I am doing, this paper is just a kind of timely rain in my almost dry land.</p><p>And thirdly, I knew that a doctor dissertation is not easy and also not difficult for me, and I know what it should cover from the outline and something else even though I am trying to be a doctor. If I have a chance, I will not afraid of it.</p><p>Last but not least, I hope I could have opportunity to implement/prove/check out her ideas one day.</p>]]></content>
      
      
      <categories>
          
          <category> rumination </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dissertation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ rvalue reference</title>
      <link href="/2019/02/14/CppRvalueReference/"/>
      <url>/2019/02/14/CppRvalueReference/</url>
      
        <content type="html"><![CDATA[<h2 id="c-rvalue-reference"><a href="#c-rvalue-reference" class="headerlink" title="c++ rvalue reference"></a>c++ rvalue reference</h2><h3 id="why-we-need-rvalue-references"><a href="#why-we-need-rvalue-references" class="headerlink" title="why we need rvalue references?"></a>why we need rvalue references?</h3><p>rvalue references are a new reference type introduced in c++0x that help solve the problem of <strong>unnecessary copying</strong> and enable <strong>perfect forwarding</strong>. When the right-hand side of an assignment is an rvalue, the the left-hand side object can steal resources from the right-hand side object rather than performing a separate allocation, thus enabling <strong>move semantics</strong>.<br><a id="more"></a></p><h3 id="what-is-rvalue-and-lvalue"><a href="#what-is-rvalue-and-lvalue" class="headerlink" title="what is rvalue and lvalue?"></a>what is rvalue and lvalue?</h3><ul><li>lvalue: those could be appeared in the left of the <code>operator =</code></li><li>rvalue: those could only be appeared in the right of the <code>operator =</code></li></ul><p><strong>note:</strong> <code>C++</code> with its user-defined types has introduced some subtleties regarding modifiability and assignability that cause this definition to be incorrect. Let us see the following samples:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// sample 1</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">a = b;      <span class="comment">//OK</span></span><br><span class="line">b = a;      <span class="comment">//OK</span></span><br><span class="line">a = a + b;  <span class="comment">//OK</span></span><br><span class="line"></span><br><span class="line">a + b = <span class="number">12</span>; <span class="comment">// Error, lvalue required as left operand of assignment</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// sample 2</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s1</span><span class="params">(<span class="string">"hello"</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s2</span><span class="params">(<span class="string">"world"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">s1 + s2 = s2; <span class="comment">// It is OK, how surprising!!!</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"s1 = "</span> &lt;&lt; s1 &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//s1 = hello</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"s2 = "</span> &lt;&lt; s2 &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//s2 = world</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span>() = <span class="string">"Hello World"</span>; <span class="comment">// It could be assigned to a temp object!!!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// sample 3</span></span><br><span class="line">comple&lt;<span class="keyword">int</span>&gt; c1(<span class="number">3</span>, <span class="number">8</span>), c2(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">c1 + c2 = comple&lt;<span class="keyword">int</span>&gt;(<span class="number">4</span>, <span class="number">9</span>);  <span class="comment">//OK, c1 + c2 could be as lvalue!!!</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"c1 = "</span> &lt;&lt; c1 &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//c1 = (3,8)</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"c2 = "</span> &lt;&lt; c2 &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//c2 = (1,0)</span></span><br><span class="line"></span><br><span class="line">comple&lt;<span class="keyword">int</span>&gt;() = <span class="keyword">complex</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">4</span>, <span class="number">9</span>); <span class="comment">//It could be assigned to a temp object!!!</span></span><br></pre></td></tr></table></figure><h3 id="the-forms-of-rvalue"><a href="#the-forms-of-rvalue" class="headerlink" title="the forms of rvalue"></a>the forms of rvalue</h3><ul><li>those could only appeared in the right of the <code>operator =</code></li><li>temp object</li><li>return value(special form of temp object)</li></ul><p><strong>note:</strong> It would lose some import information of object(especial for rvalue) in call hierarchy. The following is a sample.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">int</span> &amp; i)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">int</span> &amp;&amp; i)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">forward</span><span class="params">(<span class="keyword">int</span> &amp;&amp; i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    process(i);<span class="comment">// unperfect forwarding</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="What-is-perfect-forwarding"><a href="#What-is-perfect-forwarding" class="headerlink" title="What is perfect forwarding?"></a>What is perfect forwarding?</h3><p>Perfect forwarding allows you to write a single function template that takes n arbitrary arguments and forwards them transparently to another arbitrary function. The nature of argument(modifiable, const, lvalue, or rvalue) is preserved in this forwarding process. </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">functionA</span><span class="params">(T1 &amp;&amp; t1, T2 &amp;&amp; t2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    functionB(<span class="built_in">std</span>::forward&lt;T1&gt;(t1), </span><br><span class="line">              <span class="built_in">std</span>::forward&lt;T2&gt;(t2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Implementation-of-moveable-aware-class"><a href="#Implementation-of-moveable-aware-class" class="headerlink" title="Implementation of moveable aware class"></a>Implementation of moveable aware class</h3><p>A  class with awareness have to implement the big 5, which support <strong>move semantics</strong>. And the <strong>move constructor</strong> and the <strong>destructor</strong> should be guaranteed  without throw, while <strong>copy constructor</strong> behaves as deep copy.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mystring</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~Mystring()  </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">if</span> (m_data) <span class="keyword">delete</span> m_data; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Mystring() </span><br><span class="line">    : m_data(<span class="literal">nullptr</span>)</span><br><span class="line">    , m_len(<span class="number">0</span>)</span><br><span class="line">    &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    Mystring(<span class="keyword">const</span> Mystring &amp; rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        m_len = rhs.m_len;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="keyword">char</span>[m_len + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">memcpy</span>(m_data, rhs.m_data, rhs.m_len);</span><br><span class="line">        m_data[m_len] = <span class="string">'\0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Mystring(<span class="keyword">const</span> Mystring &amp;&amp; rhs) <span class="keyword">noexcept</span> <span class="comment">// noexcept</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_data = rhs.m_data;</span><br><span class="line">        m_len = rhs.m_len;</span><br><span class="line">        </span><br><span class="line">        rhs.m_len = <span class="number">0</span>;</span><br><span class="line">        rhs.m_data = <span class="literal">nullptr</span>;<span class="comment">// when rvalue is a temp object, the dctor will be called while it leaves the efficetive domain(eg: as a function parameter)</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Mystring &amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Mystring &amp; rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> != rhs) </span><br><span class="line">        &#123;</span><br><span class="line">            m_len = rhs.m_len;</span><br><span class="line">            <span class="keyword">if</span> (m_data) <span class="keyword">delete</span> m_data;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="keyword">char</span>[m_len + <span class="number">1</span>];</span><br><span class="line">            <span class="built_in">memcpy</span>(m_data, rhs.m_data, rhs.m_len);</span><br><span class="line">            m_data[m_len] = <span class="string">'\0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Mystring &amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Mystring &amp;&amp; rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> != rhs)</span><br><span class="line">        &#123;</span><br><span class="line">            m_len = rhs.m_len;</span><br><span class="line">            <span class="keyword">if</span> (m_data) <span class="keyword">delete</span> m_data;</span><br><span class="line">            m_data = rhs.m_data;</span><br><span class="line">         </span><br><span class="line">            rhs.m_len = <span class="number">0</span>;</span><br><span class="line">            rhs.m_data = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span> * m_data; </span><br><span class="line">    <span class="keyword">size_t</span> m_len;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Testify-it-in-the-STL-containers"><a href="#Testify-it-in-the-STL-containers" class="headerlink" title="Testify it in the STL containers"></a>Testify it in the STL containers</h3>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++2.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Translation] Trusted Computing Group At |(TCG)| Organisation</title>
      <link href="/2019/01/30/TCG/"/>
      <url>/2019/01/30/TCG/</url>
      
        <content type="html"><![CDATA[<h2 id="Trusted-Computing-Group-At-TCG-Organisation"><a href="#Trusted-Computing-Group-At-TCG-Organisation" class="headerlink" title="Trusted Computing Group At | (TCG) | Organisation"></a>Trusted Computing Group At | (TCG) | Organisation</h2><p>Trusted Computing based on hardware root of trust has been developed  by industry to protect computing infrastructure and billions of end  points.</p><blockquote><p>基于可信的硬件可信计算，已被产业界开发出来，用以保护计算基础设施以及数以万计的终端产品。</p></blockquote><a id="more"></a><p>TCG created the Trusted Platform Module cryptographic capability,  which enforces specific behaviors and protects the system against  unauthorized changes and attacks such as malware and root kits. As  computing has expanded to different devices and infrastructure has  evolved, so too has TCG extended the concept of trusted systems well  beyond the computer-with-a-TPM to other devices, ranging from hard disk  drives and mobile phones.</p><blockquote><p>TCG组建了可信平台单元(TPM)加密功能，能够强制指定行为以及保护系统以免于诸如恶意软件、根工具包等非授权的更改和攻击。由于计算以及普及到不同设备中，计算基础设施也包含其中，因此TCG也很好地拓展了可信计算的概念，该概念扩展至一台计算机配置一个TPM之外的其他设备，涵盖了从硬盘设备到移动电话等诸多终端产品。</p></blockquote><p>Standards-based Trusted Computing technologies developed by TCG  members now are deployed in enterprise systems, storage systems,  networks, embedded systems, and mobile devices and can secure cloud  computing and virtualized systems. Thousands of vendors offer a variety  of Trusted Computing-based products, including hardware, applications,  and services.</p><blockquote><p>现在，TCG成员开发的标准可信计算技术，正被部署在企业系统、存储系统、网络、嵌入式系统、和诸多移动设备中，能够保护云计算和虚拟化系统(安全)。数以千计的供应商提供了包含硬件、(软件)应用以及服务的大量可信计算产品。</p></blockquote><p>The result is that systems, networks, and applications are safer,  less prone to viruses and malware and thus not only more reliable but  also simpler to deploy and easier to manage.</p><blockquote><p>其结果就是系统、网络以及应用程序会更加安全，更加不易被病毒和恶意软件感染，因此不仅更加可靠且更加简便易于部署和管理。</p></blockquote><h2 id="Benefits"><a href="#Benefits" class="headerlink" title="Benefits"></a>Benefits</h2><h3 id="Systems-based-on-Trusted-Computing"><a href="#Systems-based-on-Trusted-Computing" class="headerlink" title="Systems based on Trusted Computing:"></a>Systems based on Trusted Computing:</h3><ul><li>Protect critical data and systems agains a variety of attacks</li><li>Enable secure authentication and strong protection of unlimited certificates, keys, and passwords that otherwise are accessible</li><li>Establish strong machine identity and integrity</li><li>Help satisfy regulatory compliance with hardware-based security</li><li>Cost less to manage, removing need for expensive tokens and peripherals</li></ul><blockquote><p>基于可信计算的系统：</p><ul><li>保护关键数据和系统免于若干攻击</li><li>启用安全验证和对于无限制证书、秘钥、密码等的强保护，否则它们将会是对外可访问的</li><li>建立强机器验证和完整性(验证)</li><li>帮助满足基于硬件安全规则的适配</li><li>更低成本管理，移除高价的令牌和外围设备</li></ul></blockquote><h3 id="Trusted-Computing-Technologies"><a href="#Trusted-Computing-Technologies" class="headerlink" title="Trusted Computing Technologies:"></a>Trusted Computing Technologies:</h3><ul><li>Provide more secure remote access through a combination of machine and user authentication</li><li>Protect against data leakage by confirmation of platform integrity prior to decryption</li><li>Provide hardware-based protection for encryption and authentication  keys used by stored data files and communications (email, network  access, etc)</li><li>Protect in hardware Personally Identifiable Information, such as user IDs and passwords</li><li>Protect passwords and credentials stored on drives</li></ul><blockquote><p>可信计算技术：</p><ul><li>通过机器和用户验证组合方式提供更加安全的远程的访问</li><li>通过平台完整性优先级解密来防止数据泄露</li><li>为文件存储以及诸如邮件、网络授权等的交互提供基于硬件的保护</li><li>保护诸如用户ID和密码等的个人识别信息的硬件保护</li><li>提供密码和凭证的驱动层存储保护</li></ul></blockquote><h2 id="Standards-Development"><a href="#Standards-Development" class="headerlink" title="Standards Development"></a>Standards Development</h2><p>Security is built into an increasing number of general purpose ICT  products, and security standards are fundamental to the integrity and  sustainability of the global ICT infrastructure. The Trusted Computing  Group (TCG) believes that open, interoperable, and internationally  vetted standards are critical for the success of trusted computing, and  that the multilateral approach to creating such standards is most  effective.</p><blockquote><p>安全已被越来越多的通用ICT产品所采用，安全标准是全球ICT基础设施完整性和可持续性的基础。TCG认为开放、内部开放，交互操作，以及国际审查标准，对于可信计算的成功至关重要，TCG还认为，创建这样一个标准的多边方法，是最高效的。</p></blockquote><p>TCG works within the international standards community, and has  liaison and working group relationships with the Internet Engineering  Task Force (IETF) and the JTC1 joint committee of the International  Organization for Standardization (ISO) and the International  Electrotechnical Commission (IEC). The Trusted Platform Module is  defined by an <a href="http://standards.iso.org/ittf/PubliclyAvailableStandards/index.html" target="_blank" rel="noopener">ISO/IEC international standard</a>*. The  TCG Certification Program leverages established and recognized security  evaluation standards. This program relies on certification by  laboratories operating under the supervision of National Schemes of <a href="https://www.commoncriteriaportal.org/" target="_blank" rel="noopener">Common Criteria</a> members.</p><blockquote><p>TCG在国际标准社区内工作，与IETF、ISO的JTC1联合会、以及IEC是工作合作伙伴关系。TPM写入了ISO/IEC标准。TCG认证项目影响了已被建立和认可的安全评估标准。这个项目基于在共同标准成员的国家模式的监督下运作实验室的认证。</p></blockquote><p>In support of open security standards, TCG encourages all nations to  adopt global best practices around standards development and adoption.  An open process fully supports worldwide participation from industry,  academia, and government with fair and transparent development and  decision processes. Specifications must be fully transparent and  available to all participants, both during development and for  implementation. TCG supports the use of published, peer reviewed  standards and cryptographic algorithms.</p><blockquote><p>在开放安全标准方面，TCG鼓励所有国家采用围绕标准开发和采用的国际最佳实践。一个开放进程支持国际范围的从产业界、学术界以及有着公平、透明的开发和决断的政府等参与者。这一说明在开发和实现过程中，必须完全向所有参与者透明和公开。TCG支持出版、同行评议标准以及加密算法的使用。</p></blockquote><p>TCG only supports open standards that are developed through a  transparent development process, have undergone rigorous open review,  and are compatible with existing global standards. Closed standards  hamper both existing and emerging markets, and are detrimental to the  security of global ICT infrastructure, representing an obstacle to  technology innovation and industry growth.</p><blockquote><p>TCG仅支持，通过透明的开发过程开发的，拥有严格开放评审的，以及与现存国际标准相兼容的，开放标准。封闭的标准阻碍现在和新兴的市场，危害全球ICT基础设施的安全，是科技创新和产业发展的绊脚石。</p></blockquote><p>TCG recognizes international standards in the field of IT security as  the most appropriate method to ensure efficacy, interoperability,  adoption and user acceptance. TCG takes into consideration international  market requirements through international membership and welcomes  participation from industry, academia, and governments in a unified,  worldwide Trusted Computing standards development process.</p><blockquote><p>TCG把IT领域安全的国际标准当作，保证效率、交互操作、用户接受并采用等的最为恰当的方式。TCG通过，国际会员以及欢迎来自产业界、学术界、以及统一的政府的参与者等国际范围的可信计算标准开发进程，将国际市场要求纳入了考虑范围。</p></blockquote><p>*<em>The Trusted Computing Group Trusted Platform Module specification version 1.2 is published as ISO/IEC 11889 Parts 1-4.</em></p><blockquote><p>TCG的TPM说明的1.2版出版在ISO/IEC 11889的1-4部分。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> translation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[translation] High-Performance Server Architecture</title>
      <link href="/2019/01/28/HighPerformanceServer/"/>
      <url>/2019/01/28/HighPerformanceServer/</url>
      
        <content type="html"><![CDATA[<h2 id="High-Performance-Server-Architecture-Jeff-Darcy"><a href="#High-Performance-Server-Architecture-Jeff-Darcy" class="headerlink" title="High-Performance Server Architecture-Jeff Darcy"></a>High-Performance Server Architecture-Jeff Darcy</h2><p>The purpose of this document is to share some ideas that I’ve  developed over the years about how to develop a certain kind of  application for which the term “server” is only a weak approximation.   More accurately, I’ll be writing about a broad class of programs that  are designed to handle very large numbers of discrete messages or  requests per second. Network servers most commonly fit this definition,  but not all programs that do are really servers in any sense of the  word.  For the sake of simplicity, though, and because “High-Performance  Request-Handling Programs” is a really lousy title, we’ll just say  “server” and be done with it.</p><blockquote><p>这篇文档的目的在于分享一些思路，关于我多年来如何开发某些特定的应用——可以近似地称为‘’服务器‘’。更准确地说，我即将写就的是关于广义上旨在解决吞吐量（每秒处理数量巨大的非连续消息或者请求）的一类程序。网络服务器最符合这个定义，但并非所有程序所完成的功能是真正意义上的服务器程序。简而言之，因为“高性能请求处理问题”真的是一个非常蹩脚称谓，所以我们称这类程序叫做“服务器”，且一直以来就是这么叫的。</p></blockquote><a id="more"></a><p>I will not be writing about “mildly parallel” applications, even  though multitasking within a single program is now commonplace.  The  browser you’re using to read this probably does some things in parallel,  but such low levels of parallelism really don’t introduce many  interesting challenges.  The interesting challenges occur when the  request-handling infrastructure itself is the limiting factor on overall  performance, so that improving the infrastructure actually improves  performance.  That’s not often the case for a browser running on a  gigahertz processor with a gigabyte of memory doing six simultaneous  downloads over a DSL line.  The focus here is not on applications that  sip through a straw but on those that drink from a firehose, <u>on the very  edge of hardware capabilities where how you do it really does matter</u>.</p><blockquote><p>我不去写关于“轻并行”(原文为mildly parallel)的应用，尽管现在单个程序中处理多个任务是家常便饭。你正在使用读取这篇文章的浏览器极有可能就是并行处理的，但是这些低层次的并行机制并不会引起多少有意思的挑战。有趣的挑战是发生在请求处理机制从整体性能意义上自身成为了限制因素，所以改进（请求处理）机制实质上是提高性能。一个浏览器运行在配置GB级别内存和GHz级别处理器的机器上，通过一根DSL（）线路同时处理6个下载任务，那不是经常发生的情况。这篇文章的焦点不是吸管式yunxi般的应用程序，而是消防管道式狂喷的应用程序，专注于硬件处理能力的各个边界， </p></blockquote><p>Some people will inevitably take issue with some of my comments and  suggestions, or think they have an even better way.  Fine.  I’m not  trying to be the Voice of God here; these are just methods that I’ve  found to work for me, not only in terms of their effects on performance  but also in terms of their effects on the difficulty of debugging or  extending code later.  Your mileage may vary.  If something else works  better for you that’s great, but be warned that almost everything I  suggest here exists as an alternative to something else that I tried  once only to be disgusted or horrified by the results.  <u>Your pet idea  might very well feature prominently in one of these stories</u>, and  innocent readers might be bored to death if you encourage me to start  telling them.  You wouldn’t want to hurt them, would you?</p><blockquote><p>有些人不可避免地不同意我的某些评论和建议，或者认为他们有更好的方法。也行，在这里我并打算去当什么神的代言人；这些仅仅是我已发现于我行之有效的一些方法而已，(它们)不仅仅关于性能上的影响，还关于调试的复杂度上以及后期的扩展上的影响。你的开发可能会变化。如果有些（建议）更好地解决了你的问题自然很好，但是要小心的是，几乎我这里的每一项建议在处理其他状况都还有另一个选择，（针对这些情况）我仅试过一次，其结果是厌恶而又惊悚的。,,, 如果你鼓励我去告诉那些傲慢的读者，那他们将会无聊致死的。你也不想伤害他们，是吧？</p></blockquote><p>The rest of this article is going to be centered around what I’ll call the Four Horsemen of Poor Performance:</p><ol><li>Data copies</li><li>Context switches</li><li>Memory allocation</li><li>Lock contention</li></ol><blockquote><p>文章接下类的部分将会把重心放在我所谓的差性能的四个消防员问题。</p><ol><li>数据拷贝</li><li>上下文切换</li><li>内存分配</li><li>锁争用</li></ol></blockquote><p>There will also be a catch-all section at the end, but these are the  biggest performance-killers.  If you can handle most requests without  copying data, without a context switch, without going through the memory  allocator and without contending for locks, you’ll have a server that  performs well even if it gets some of the minor parts wrong.</p><blockquote><p>文章将会覆盖所有(四个)部分，但这些并不是最大的性能杀手。如果你可以处理大多数请求，而没有发生数据拷贝、没有发生上下文切换、没有发生内存分配、没有发生锁争用等问题，你所实现的是一个性能还不错的服务器，尽管它会发生一些微小的错误。</p></blockquote><p>This could be a very short section, for one very simple reason: most  people have learned this lesson already.  Everybody knows data copies  are bad; it’s obvious, right?  Well, actually, it probably only seems  obvious because you learned it very early in your computing career, and  that only happened because somebody started putting out the word decades  ago.  I know that’s true for me, but I digress.  Nowadays it’s covered  in every school curriculum and in every informal how-to.  <u>Even the  marketing types have figured out that “zero copy” is a good buzzword.</u></p><blockquote><p>本部分将会特别简短，一个简单的原因是：大多数人早已了解了这些节内容。每个人都知道数据拷贝是糟糕的；非常明显，是吧？因为在你的计算机学习阶段早就知道这个事实（数据拷贝不好），你之所以会学习到这样的观点是因为几十年前就有人提出了。我自己就是这样，但我并准备在这里讨论（数据拷贝是糟糕的）。目前来说，数据拷贝是糟糕这一说法，覆盖在每一所大学课程中，以及非正式的教程(原文为how-to)中。尽管工业界早已指明“零拷贝”是不错的流行说法。</p></blockquote><p>Despite the after-the-fact obviousness of copies being bad, though,  there still seem to be nuances that people miss.  The most important of  these is that data copies are often hidden and disguised.  Do you really  know whether any code you call in drivers or libraries does data  copies?  It’s probably more than you think.  Guess what “Programmed I/O”  on a PC refers to.  An example of a copy that’s disguised rather than  hidden is a hash function, which has all the memory-access cost of a  copy and also involves more computation.  <u>Once it’s pointed out that  hashing is effectively “copying plus” it seems obvious that it should be  avoided</u>, but I know at least one group of brilliant people who had to  figure it out the hard way.  If you really want to get rid of data  copies, either because they really are hurting performance or because  you want to put “zero-copy operation” on your hacker-conference slides,  you’ll need to track down a lot of things that really are data copies  but don’t advertise themselves as such.</p><blockquote><p>尽管数据拷贝比较糟糕已为人所众知，还是有一些细微的差别会被忽视。主要是因为数据拷贝常常很隐蔽不易察觉。你真的知道调用驱动程序或者调用第三方库时是否发生了数据拷贝么？这个过程极有可能比你预想的发生了更多的拷贝。试想一下，PC端IO编程更青睐的处理方式。举个hash函数的迷惑人眼的数据拷贝例子，hash函数对于每一次拷贝都是访问内存的代价，并且伴随着更多的CPU计算。一旦指出了hash会发生内存级拷贝，那么避免它是毫无疑问的，然而据我所知，至少有一群专家级人物使用了非常艰难的方式。如果你真的想完全避免数据拷贝，要么因为其影响了性能，要么因为你想在你的分享会讲稿上展示你的“零拷贝操作”，那么你将需要深挖许多领域的真正发生数据拷贝之处，但不要对如此这些做法进行布道。</p></blockquote><p>The tried and true method for avoiding data copies is to use  indirection, and pass buffer descriptors (or chains of buffer  descriptors) around instead of mere buffer pointers.  Each descriptor  typically consists of the following:</p><ul><li>A pointer and length for the whole buffer.</li><li>A pointer and length, or offset and length, for the part of the buffer that’s actually filled.</li><li>Forward and back pointers to other buffer descriptors in a list.</li><li>A reference count.</li></ul><blockquote><p>经验表明正确避免数据拷贝的方式是使用间接方式，通过传递缓冲去描述符（或者多个缓冲区描述符），而非传递缓冲区指针。典型做法是每个描述符都包含以下内容：</p><ul><li>一个指针以及该缓冲区的长度</li><li>一个指针以及长度，可以是偏移量或者长度，用以指明缓冲区实际有效的数据部分</li><li>缓冲区描述符双向链表中的前向指针与后向指针</li><li>一个引用计数器</li></ul></blockquote><p>Now, instead of copying a piece of data to make sure it stays in  memory, code can simply increment a reference count on the appropriate  buffer descriptor.  This can work extremely well under some conditions,  including the way that a typical network protocol stack operates, but it  can also become a really big headache.  Generally speaking, it’s easy  to add buffers at the beginning or end of a chain, to add references to  whole buffers, and to deallocate a whole chain at once.  Adding in the  middle, deallocating piece by piece, or referring to partial buffers  will each make life increasingly difficult.  Trying to split or combine  buffers will simply drive you insane.</p><blockquote><p>目前，针对拷贝小段数据以保证其常驻内存，取而代之的做法是，在代码中增加缓冲区描述符的相应引用计数器。通常这样的做法会表现的极为高效，典型的应用有如特定网络协议栈操作，但是，这样也会让人头大。通常数来，在链表头部和尾部增加操作，对整个缓冲区描述符进行引用计数器加操作，以及一次释放所有缓冲区，这些都相对容易。在（链表）中间操作，对部分缓冲区描述符进行引用计数器减操作，或者挨个释放缓冲区(注：此处调整了原文顺序)，都将使得难度陡增。试着切分或者合并缓冲区都会让人陷入疯狂。</p></blockquote><p>I don’t actually recommend using this approach for everything, though.  Why not?  Because it gets to be a <em>huge</em>  pain when you have to walk through descriptor chains every time you  want to look at a header field.  There really are worse things than data  copies.  I find that the best thing to do is to identify the large  objects in a program, such as data blocks, make sure <em>those</em> get allocated separately as described above so that they don’t need to be copied, and not sweat too much about the other stuff.</p><blockquote><p>但事实上，我并不建议把它当万能膏药。因为，当你需要遍历描述符表时，每一次都需要访问表头，相较于数据拷贝而言，这无疑更糟糕，带来更大的性能负担。我认为，最为有效的方式，识别你程序中诸如数据块等的大(内存)对象，确保这些对象如上述方式那样单独分配内存以使它们不必每次都拷贝，而其他(小内存对象)则可以不必太过于关注(其数据拷贝引发的性能负担)。</p></blockquote><p>This brings me to my last point about data copies: don’t go overboard  avoiding them.  I’ve seen way too much code that avoids data copies by  doing something even worse, like forcing a context switch or breaking up  a large I/O request.  Data copies are expensive, and when you’re  looking for places to avoid redundant operations they’re one of the  first things you should look at, <u>but there is a point of diminishing  returns.  Combing through code and then making it twice as complicated  just to get rid of that last few data copies is usually a waste of time  that could be better spent in other ways.</u></p><blockquote><p>最后关于数据拷贝的一点是，不要尝试去避免它。我见过大量诸如通过强制使用上下文切换或者中断一个大数据IO请求等，试图避免数据拷贝的代码，反而使得事情更糟。在避免大量操作的情况下数据拷贝是首要需要关注的，因为数据拷贝的代价昂贵，但是，</p></blockquote><p>Whereas everyone thinks it’s obvious that data copies are bad, I’m  often surprised by how many people totally ignore the effect of context  switches on performance.  In my experience, context switches are  actually behind more total “meltdowns” at high load than data copies;  the system starts spending more time going from one thread to another  than it actually spends within any thread doing useful work.  The  amazing thing is that, at one level, it’s totally obvious what causes  excessive context switching.  The #1 cause of context switches is having  more active threads than you have processors.  As the ratio of active  threads to processors increases, the number of context switches also  increases - linearly if you’re lucky, but often exponentially.  This  very simple fact explains why multi-threaded designs that have one  thread per connection scale very poorly.  The only realistic alternative  for a scalable system is to limit the number of active threads so it’s  (usually) less than or equal to the number of processors.  One popular  variant of this approach is to use only one thread, ever; while such an  approach does avoid context thrashing, and avoids the need for locking  as well, <u>it is also incapable of achieving more than one processor’s  worth of total throughput and thus remains beneath contempt unless the  program will be non-CPU-bound (usually network-I/O-bound) anyway.</u></p><blockquote><p>每个人都会觉得数据拷贝是糟糕的做法，而我常常诧异于有如此多的人完全忽视了上下文切换对于性能的影响。从我的经验看来，上下文切换实际上背后的负担比数据拷贝更高；相较于线程本身所做的有效工作，系统花费了更多的时间用于线程之间切换。非常有趣的是，一方面，什么造成了上下文切换事比较明显的，第一，运行着的线程(原文为active)数量比处理器核心(原文为processor)数多的多，由于运行态线程数与处理器核心数的比值的增加，线程上下文切换的次数也会增加——如果比较幸运的话是线性增加，单常常是指数增加。这个简单事实解释了，为什么在大规模系统的多线程设计中，一个线程处理一个连接是非常低效的。在大规模系统下，唯一务实的选择是限制运行态的线程数量使其不大于处理器核心数。一个比较流行的实现是只用一个线程，在解决了线程切换造成的新能负担的同时，还解决了对（线程）锁的需求，… </p></blockquote><p>The first thing that a “thread-frugal” program has to do is figure  out how it’s going to make one thread handle multiple connections at  once.  This usually implies a front end that uses select/poll,  asynchronous I/O, signals or completion ports, with an event-driven  structure behind that.  Many “religious wars” have been fought, and  continue to be fought, over which of the various front-end APIs is best.   Dan Kegel’s <a href="http://www.kegel.com/c10k.html" target="_blank" rel="noopener">C10K paper</a> is  a good resource is this area.  Personally, I think all flavors of  select/poll and signals are ugly hacks, and therefore favor either AIO  or completion ports, but it actually doesn’t matter that much.  They all  - except maybe select() - work reasonably well, and don’t really do  much to address the matter of what happens past the very outermost layer  of your program’s front end.</p><blockquote><p>“简约线程型”程序的首要一着是，必须解决一次保证多个连接问题。通常的做法是前端使用select/poll，异步IO，信号机制，或者<a href="https://en.wikipedia.org/wiki/Input/output_completion_port" target="_blank" rel="noopener">IOCP</a>(注:译文添加，原文无此链接)，后端使用事件驱动架构。许多关于哪个前端API是最好的“信仰战争”被引发，现在还在激战。 <a href="http://www.kegel.com/c10k.html" target="_blank" rel="noopener">C10K paper</a> ——Dan Kegel的这篇文章是这个领域的非常好的资料。个人而言，所有支持select/poll以及信号机制的，都是比较蹩脚的骇客，那些要么支持异步IO要么支持IOCP的人，也不见得高明多少。他们都期望<code>select()</code>函数逻辑表现很好，而并没有解决程序前端传输发生了什么这一个事实。</p></blockquote><p>The simplest conceptual model of a multi-threaded event-driven server  has a queue at its center; requests are read by one or more “listener”  threads and put on queues, from which one or more “worker” threads will  remove and process them.  Conceptually, this is a good model, but all  too often people actually implement their code this way.  Why is this  wrong?  Because the #2 cause of context switches is transferring work  from one thread to another.  <u>Some people even compound the error by  requiring that the response to a request be sent by the original thread -  guaranteeing not one but two context switches per request</u>.  It’s very  important to use a “symmetric” approach in which a given thread can go  from being a listener to a worker to a listener again without ever  changing context.  Whether this involves partitioning connections  between threads or having all threads take turns being listener for the  entire set of connections seems to matter a lot less.</p><blockquote><p>最为简单的多线程事件驱动服务器概念模型是持有一个队列；请求被一个或者多个“监听者”判断就绪后，就加到这个队列中，而后，一个或者多个“工作者”线程从该队列中摘取请求来进行处理。从概念上讲，这是一个较好的模型。但是，很少有人按照这个模型去实现。为什么会这样南辕北辙呢？因为第二个步骤会引发工作线程之间的切换。<u>有些人在处理应答原始线程发过来的请求时——为了保证每个请求是一个线程处理而没有发生两个线程切换，把事情搞得更加糟糕</u>。使用“对称方法”，即使得给定一个线程能够从“监听者”到“工作者”，再到“监听者”，而没有进行线程切换，是非常重要的。这个过程中，是否包含了线程间局部连接 或者所有线程轮训作为监听者，对性能影响微乎其微。</p></blockquote><p>Usually, it’s not possible to know how many threads will be active  even one instant into the future.  After all, requests can come in on  any connection at any moment, or “background” threads dedicated to  various maintenance tasks could pick that moment to wake up.  If you  don’t <em>know</em> how many threads are active, how can you <em>limit</em>  how many are active?  In my experience, one of the most effective  approaches is also one of the simplest: use an old-fashioned counting  semaphore which each thread must hold whenever it’s doing “real work”.   If the thread limit has already been reached then each listen-mode  thread might incur one extra context switch as it wakes up and then  blocks on the semaphore, but once all listen-mode threads have blocked  in this way they won’t continue contending for resources until one of  the existing threads “retires” so the system effect is negligible.  More  importantly, this method handles maintenance threads - which sleep most  of the time and therefore dont’ count against the active thread count -  more gracefully than most alternatives.</p><blockquote><p>通常情况下，不可能知道未来有多少个运行态线程，在单进程（原文为instance）下也是如此。毕竟，请求是神出鬼没的，以及，“后端”线程(即多个就绪态任务)也在等着请求随时来触发。如果你不知道有多少个运行态的线程，那如何设置运行态线程的数量阀值。我的经验是，一个最为高效的做法同时也是最为简单的：使用一个老套的信号量计数器，每个线程只要在做“有效工作”就必须保持（这个计数器）。如果运行态的线程数量超过了设置的阀值，耳后每一个监听态的线程就需要一个额外的上下文切换，因为其首先进入运行态然后因为信号量而阻塞，但是，一旦所有的监听态的线程都因为超过阀值都进入了阻塞态，它们将不会再继续参与资源竞争，直到运行态下的某个线程被淘汰，因此对整个系统的效率影响比较小。更为重要的是，这种方法比其他方法在处理就绪态线程（大多数时候都在休眠因而不必与运行态的线程争夺引用计数）这种情况时显得更为轻量（原文为gracefully）。</p></blockquote><p>Once the processing of requests has been broken up into two stages  (listener and worker) with multiple threads to service the stages, it’s  natural to break up the processing even further into more than two  stages.  In its simplest form, processing a request thus becomes a  matter of invoking stages successively in one direction, and then in the  other (for replies).  However, things can get more complicated; a stage  might represent a “fork” between two processing paths which involve  different stages, or it might generate a reply (e.g. a cached value)  itself without invoking further stages.  Therefore, each stage needs to  be able to specify “what should happen next” for a request.  There are  three possibilities, represented by return values from the stage’s  dispatch function:</p><ul><li><u>The request needs to be passed on to another stage (an ID or pointer in the return value).</u></li><li>The request has been completed (a special “request done” return value)</li><li>The request was blocked (a special “request blocked” return value).   This is equivalent to the previous case, except that the request is not  freed and will be continued later from another thread.</li></ul><blockquote><p>一旦请求处理被分成多线程下提供服务的两个状态（监听者和工作者），很自然地处理过程得处理超过两个状态。在这种简单模式下，一个请求处理即为触发从监听态到工作态的改变，以及响应(客户端)请求这么个过程。然而，事情却比这要复杂得多；一种可能是在监听态和工作态之间的切换态，一种(例如缓存值)可能是进行了回复却没有进行状态切换。因此，每一个状态都需要有能力指明对于每一个请求的下一个状态是什么。通过采用处理函数(注：原文为dispatch)返回值方式，有三种可能策略：</p><ul><li>请求需要被传递到其他状态(返回值的ID或者指针)</li><li>请求已经完成(一个特定“请求处理完成”的返回值)</li><li>请求被阻塞(一个特定“请求被阻塞”的返回值)，除了请求没有被释放还可以被其他线程激活外，这和前一种情况相同</li></ul></blockquote><p>Note that, in this model, queuing of requests is done <em>within</em>  stages, not between stages.  This avoids the common silliness of  constantly putting a request on a successor stage’s queue, then  immediately invoking that successor stage and dequeuing the request  again; I call that lots of queue activity - and locking - for nothing.</p><blockquote><p>需要注意的是，在这种模型下，请求是在某一个状态下处理，而非两个状态之间。这就避免了总是把请求放在队尾弊端，同时马上能够触发尾部状态的那个请求出队；我认为大量队列活动以及锁操作不值一提。</p></blockquote><p>If this idea of separating a complex task into multiple smaller  communicating parts seems familiar, that’s because it’s actually very  old.  <u>My approach has its roots in the <a href="http://www.afm.sbu.ac.uk/csp/" target="_blank" rel="noopener">Communicating Sequential Processes</a>  concept elucidated by C.A.R. Hoare in 1978, based in turn on ideas from  Per Brinch Hansen and Matthew Conway going back to 1963 - before I was  born!</u>  However, when Hoare coined the term CSP he meant “process” in the  abstract mathematical sense, and a CSP process need bear no relation to  the operating-system entities of the same name.  In my opinion, the  common approach of implementing CSP via thread-like coroutines within a  single OS thread gives the user all of the headaches of concurrency with  none of the scalability.</p><blockquote><p>如果这个可以把一个复杂任务分解为多个较小的互相通信的部分的这个观点看起来很类似，那是因为这个思路本来就历史久远。我的方式来自</p></blockquote><p>A contemporary example of the staged-execution idea <u>evolved in a saner direction is Matt Welsh’s <a href="http://www.cs.berkeley.edu/~mdw/proj/seda/" target="_blank" rel="noopener">SEDA</a></u>.   In fact, SEDA is such a good example of “server architecture done  right” that it’s worth commenting on some of its specific  characteristics (especially where those differ from what I’ve outlined  above). </p><ol><li>SEDA’s “batching” tends to emphasize processing multiple requests  through a stage at once, while my approach tends to emphasize processing  a single request through multiple stages at once.</li><li>SEDA’s one significant flaw, in my opinion, is that it allocates a  separate thread pool to each stage with only “background” reallocation  of threads between stages in response to load.  As a result, the #1 and  #2 causes of context switches noted above are still very much present.</li><li>In the context of an academic research project, implementing SEDA in  Java might make sense.  In the real world, though, I think the choice  can be characterized as unfortunate.</li></ol><blockquote><p>当下的状态执行观点例证是…，事实上，</p></blockquote><p>Allocating and freeing memory is one of the most common operations in  many applications.  Accordingly, many clever tricks have been developed  to make general-purpose memory allocators more efficient.  However, <u>no  amount of cleverness can make up for the fact that the very generality  of such allocators inevitably makes them far less efficient than the  alternatives in many cases</u>.  I therefore have three suggestions for how  to avoid the system memory allocator altogether.</p><blockquote><p>内存分配与释放是许多应用的公共操作之一。因此，许多聪明的技巧被开发出来用以使得内存分配器更加高效。但是，再多的聪明技巧也无法弥补这样一个事实：在许多情况下，这种(内存)分配器的通用性不可避免地使它们的效率远远低于其他选择。因此，对于如何完全避免系统内存分配器，我有三个建议。</p></blockquote><p>Suggestion #1 is simple preallocation.  We all know that static  allocation is bad when it imposes artificial limits on program  functionality, but there are many other forms of preallocation that can  be quite beneficial.  Usually the reason comes down to the fact that one  trip through the system memory allocator is better than several, even  when some memory is “wasted” in the process.  Thus, if it’s possible to  assert that no more than N items could ever be in use at once,  preallocation at program startup might be a valid choice.  Even when  that’s not the case, preallocating everything that a request handler  might need right at the beginning might be preferable to allocating each  piece as it’s needed; aside from the possibility of allocating multiple  items contiguously in one trip through the system allocator, this often  greatly simplifies error-recovery code.  If memory is very tight then  preallocation might not be an option, but in all but the most extreme  circumstances it generally turns out to be a net win.</p><blockquote><p>第一个建议是简单的预分配。静态(内存)分配在手动限制程序功能是糟糕的，但是仍有许多其他形式的预分配是非常有益的。通常一个原因是一次系统内存分配比多次分配要好，尽管进程中会“浪费”一些内存。因此，如果可以断言一次使用的内存项不超过N，那么在程序启动时进行(内存)预分配可能是一个有效的选择。即使不是这样，在一开始就预先分配请求处理程序可能需要的所有(内存)也可能比在需要时才进行一点点地分配要好。除了在一次系统分配中持续分配多个内存项的可能性，预分配常会极大简化错误恢复码。如果系统内存非常紧张，那么预分配不会是个好选择，然而，在除了极其极端的情况外的所有情况，预分配通常是非常好的选择。</p></blockquote><p>Suggestion #2 is to use lookaside lists for objects that are  allocated and freed frequently.  The basic idea is to put recently-freed  objects onto a list instead of actually freeing them, in the hope that  if they’re needed again soon they need merely be taken off the list  instead of being allocated from system memory.  As an additional  benefit, transitions to/from a lookaside list can often be implemented  to skip complex object initialization/finalization.</p><blockquote><p>第二个建议是，对哪些经常需要分配和释放的对象使用一个旁路查询表。最基本的观点是，把那些最近释放的对象放到一个链表中而非直接释放掉，旨在它们需要被立刻调用时能够从链表中取出而非重新从系统中申请内存。作为一个额外的好处是，从旁路查询表中添加或者移除一个对象都会(注:原文为often，这里译作always)跳过复杂得对象析构与构造(注:这里调整了原文顺序)操作。</p></blockquote><p>It’s generally undesirable to have lookaside lists grow without  bound, never actually freeing anything even when your program is idle.   Therefore, it’s usually necessary to have some sort of periodic  “sweeper” task to free inactive objects, but it would also be  undesirable if the sweeper introduced undue locking complexity or  contention.  A good compromise is therefore a system in which a  lookaside list actually consists of separately locked “old” and “new”  lists.  Allocation is done preferentially from the new list, then from  the old list, and from the system only as a last resort; objects are  always freed onto the new list.  The sweeper thread operates as follows:</p><ol><li>Lock both lists.</li><li>Save the head for the old list.</li><li>Make the (previously) new list into the old list by assigning list heads.</li><li>Unlock.</li><li>Free everything on the saved old list at leisure.</li></ol><blockquote><p>通常旁路查询表无限的增长并不是所理想的，即使当你的程序空闲时也没有释放任何(对象)。因此，周期性的释放不活跃的对象的“清理”任务，通常是有必要的。但是，如果清理任务引进了复杂的锁机制和(资源)竞争，仍然不是理想的。因此，一个比较好的折中做法是，在实现了旁路查询表的系统中分别使用一个“老的”的和一个“新的”查询表。分配操作优先从“新的”查询表中开始，其次才是“老的”查询表，最后才是从系统中申请。清理线程的操作如下：</p><ol><li>对两个查询表加锁</li><li>保存老查询表的表头</li><li>通过分配表头把(之前的)新表变为老表</li><li>解锁</li><li>在空闲时释放老表上的所有对象。</li></ol></blockquote><p>Objects in this sort of system are only actually freed when they have  not been needed for at least one full sweeper interval, but always less  than two.  Most importantly, the sweeper does most of its work without  holding any locks to contend with regular threads.  In theory, the same  approach can be generalized to more than two stages, but I have yet to  find that useful.</p><blockquote><p>在此类系统下的对象仅在至少一个完整的清理周期内没有被再次使用才会被释放，但不会超过两个周期。最为重要的是，清理线程在大部分情况并没有和常规工作线程产生锁争用。理论上，同样的方法可以应用到不止两个状态的情况，但我并没有其实用之处。</p></blockquote><p>One concern with using lookaside lists is that the list pointers  might increase object size.  In my experience, most of the objects that  I’d use lookaside lists for already contain list pointers anyway, so  it’s kind of a moot point.  Even if the pointers were only needed for  the lookaside lists, though, the savings in terms of avoided trips  through the system memory allocator (and object initialization) would  more than make up for the extra memory.</p><blockquote><p>使用旁路查询表的一个担忧是，链表的指针域可能会使对象大小膨胀。我的经验是，大多数我已经采用旁路查询表的对象早就包含指针域，所以这是个有争议的问题。但是，即使这些指针只用于旁路查询表，通过避免系统内存分配器(和对象初始化)的访问所节省的开销也足以弥补额外的内存。</p></blockquote><p>Suggestion #3 actually has to do with locking, which we haven’t  discussed yet, but I’ll toss it in anyway.  Lock contention is often the  biggest cost in allocating memory, even when lookaside lists are in  use.  One solution is to maintain multiple private lookaside lists, such  that there’s absolutely no possibility of contention for any one list.   For example, you could have a separate lookaside list for each thread.   One list per processor can be even better, due to cache-warmth  considerations, but only works if threads cannot be preempted.  The  private lookaside lists can even be combined with a shared list if  necessary, to create a system with extremely low allocation overhead.</p><blockquote><p>第三个建议是采用还没有讨论的锁机制，但我还是把它提出来。即使是采用了旁路查询表，锁争用通常还是内存分配的最大消耗。一种解决方案是维护多个私有的旁路查询表，这样在任何一个查询表中就不存在竞争了。比如：你可以使用每个线程使用一个查询表。处于热缓存考量，一个核一个查询表将会更好，但只有线程不被抢占时才有效。私有旁路查询表甚至可以在需要时与共享表相结合使用，用以建立一个内存开销极低的系统。</p></blockquote><p>Efficient locking schemes are notoriously hard to design, because of  what I call Scylla and Charybdis after the monsters in the Odyssey.   Scylla is locking that’s too simplistic and/or coarse-grained,  serializing activities that can or should proceed in parallel and thus  sacrificing performance and scalability; Charybdis is overly complex or  fine-grained locking, with space for locks and time for lock operations  again sapping performance.  Near Scylla are shoals representing deadlock  and livelock conditions; near Charybdis are shoals representing race  conditions.  In between, there’s a narrow channel that represents  locking which is both efficient and correct…or is there?  Since  locking tends to be deeply tied to program logic, it’s often impossible  to design a good locking scheme without fundamentally changing how the  program works.  This is why people hate locking, and try to rationalize  their use of non-scalable single-threaded approaches.</p><blockquote><p>总所周知，高效的锁机制模式设计起来非常困难，因为我所谓的继《奥德赛》中的怪物：希拉以及卡里布迪斯。希拉是简单的、粗粒度的锁，序列化了那些本可以也应该并行处理的操作，从而牺牲了性能和伸缩性；卡里布迪斯是复杂的、细粒度的锁，其操作在空间和时间上都降低性能。接近怪物希拉，代表着死锁与活锁情况；接近怪物卡里布迪斯，代表着资源争用情况。在这两者之间，存在着一条代表着通往既高效又正确的狭窄通道 … 或者是在那两者之间吗？由于锁机制会深深绑定到程序逻辑中，因此常常不太可能设计一个比较好的、不会根本性的改变程序原来运作方式的锁模式。这是为什么人们不喜欢锁机制的原因，从而试图使用非伸缩的单线程方式是系统合理化。</p></blockquote><p>Almost every locking scheme starts off as “one big lock around  everything” and a vague hope that performance won’t suck.  When that  hope is dashed, and it almost always is, the big lock is broken up into  smaller ones and the prayer is repeated, and then the whole process is  repeated, presumably until performance is adequate.  Often, though, each  iteration increases complexity and locking overhead by 20-50% in return  for a 5-10% decrease in lock contention.  With luck, the net result is  still a modest increase in performance, but actual decreases are not  uncommon.  The designer is left scratching his head (I use “his” because  I’m a guy myself; get over it).  “I made the locks finer grained like  all the textbooks said I should,” he thinks, “so why did performance get  worse?”</p><blockquote><p>几乎每一中锁模式都是从所谓的“所有情况的一个大锁”开始的，寄希望于性能不会变的糟糕。当希望落空时，几乎总是将大锁分解成较小的锁在期望性能不会变糟，然后重复整个处理过程，直到性能满足需求。</p></blockquote><p>In my opinion, things got worse because the  aforementioned approach is fundamentally misguided.  Imagine the  “solution space” as a mountain range, with high points representing good  solutions and low points representing bad ones.  The problem is that  the “one big lock” starting point is almost always separated from the  higher peaks by all manner of valleys, saddles, lesser peaks and dead  ends.  It’s a classic hill-climbing problem; trying to get from such a  starting point to the higher peaks only by taking small steps and never  going downhill almost never works.  What’s needed is a <em>fundamentally</em> different way of approaching the peaks.</p><blockquote><p>我的观点是，事情变糟糕的原因是上述的方法从本质上说就带有误导性。想象一个大山范围的“解空间”，高点代表着良好的解决方案，低点代表糟糕的解决方案。问题是，大锁的起点几乎总是偏离（大山）的最高点。</p></blockquote><p>The first thing you have to do is form a mental map of your program’s locking.  This map has two axes:</p><ul><li>The vertical axis represents code.  If you’re using a staged  architecture with non-branching stages, you probably already have a  diagram showing these divisions, like the ones everybody uses for  OSI-model network protocol stacks.</li><li>The horizontal axis represents data.  In every stage, each request  should be assigned to a data set with its own resources separate from  any other set.</li></ul><blockquote><p>你首要需要处理的是形成一张程序的锁机制脑图，这张图包含两个坐标：</p><ul><li>纵轴代表着代码。如果你正使用无分支状态的体系结构，你可能早已有了一个刻画这些维度的示图，就像大家都是用的OSI模型网络协议栈一样。</li><li>横轴代表着数据。在每个状态下，每个请求都应该被分配至一个数据集中，该数据集的资源与其他数据集资源分开。</li></ul></blockquote><p>You now have a grid, where each cell represents a particular data set  in a particular processing stage.  What’s most important is the  following rule: two requests should not be in contention unless they are  in the same data set <em>and</em> the same processing stage.  If you can manage that, you’ve already won half the battle.</p><blockquote><p>现在你有了一张表格，这个表格中的每一个单元格代表着一个特定状态下的相应数据集。最重要的是这些规则：两个请求不应该产生竞争，除非他们在同一个数据集，而且在同一个处理状态下。如果你可管理这些，在这场战斗中就已经赢了一半。</p></blockquote><p>Once you’ve defined the grid, every type of locking your program does  can be plotted, and your next goal is to ensure that the resulting dots  are as evenly distributed along both axes as possible.  Unfortunately,  this part is very application-specific.  You have to think like a  diamond-cutter, using your knowledge of what the program does to find  the natural “cleavage lines” between stages and data sets.  Sometimes  they’re obvious to start with.  Sometimes they’re harder to find, but  seem more obvious in retrospect.  Dividing code into stages is a  complicated matter of program design, so there’s not much I can offer  there, but here are some suggestions for how to define data sets:</p><ul><li>If you have some sort of a block number or hash or transaction ID  associated with requests, you can rarely do better than to divide that  value by the number of data sets.</li><li>Sometimes, it’s better to assign requests to data sets dynamically,  based on which data set has the most resources available rather than  some intrinsic property of the request.  Think of it like multiple  integer units in a modern CPU; those guys know a thing or two about  making discrete requests flow through a system.</li><li>It’s often helpful to make sure that the data-set assignment is  different for each stage, so that requests which would contend at one  stage are guaranteed not to do so at another stage.</li></ul><blockquote><p>一旦你定义了这个表格，就可以绘制程序中各个类型的锁了，下一个目标是确保每一个生成的点尽可能均匀分布在两个坐标上。不幸的是，这部分跟具体应用程序关系密切。你得像钻石切割师一样思考，调用你知道程序原理的相关知识去找到处于状态和数据集之间的自然“切割线”。有时像昨夜西风凋碧树独上高楼望尽天涯路般，有时需要衣带渐宽终不悔为伊消得人憔悴般，但更多时候是众里荨她千百度慕然回首那人却在灯火阑珊处般。将程序(注:原文为code)分解成若干个状态本是程序设计的复杂之处，而我这里也不能分享(注:原文为offer)很多，但是，我可以给出一些就如何定义数据的建议。</p><ul><li>如果你有许多请求相关的块号或者hash值又或者事务ID，你最好将他们除以数据集</li><li>有时候，相较于请求的固有属性，基于哪些数据集有更加可用的资源，动态地为其数据集分配请求会更好。把它想象成线程CPU中的多个整数单元；它们对离散的请求在系统中流动知道一二。</li><li>确保每个状态下数据集的不同，常常是有帮助的。因此，请求在一个状态中竞争将会被保证不会在另一个状态中也如此。</li></ul></blockquote><p>If you’ve divided your “locking space” both vertically and  horizontally, and made sure that lock activity is spread evenly across  the resulting cells, you can be pretty sure that your locking is in  pretty good shape.  There’s one more step, though.  Do you remember the  “small steps” approach I derided a few paragraphs ago?  It still has its  place, because now you’re at a good starting point instead of a  terrible one.  In metaphorical terms you’re probably well up the slope  on one of the mountain range’s highest peaks, but you’re probably not at  the top of one.  Now is the time to collect contention statistics and  see what you need to do to improve, splitting stages and data sets in  different ways and then collecting more statistics until you’re  satisfied.  If you do all that, you’re sure to have a fine view from the  mountaintop.</p><blockquote><p>如果你已将所空间延横、纵轴划分，并且确保了锁操作均匀分布在生成的单元格中，那么就可以认定你的锁机制还不错。尽管，还有一步。还记得此前段落中我嘲讽的“众多步骤”？它们仍有借鉴意义，因为你正处于一个好的起点而非糟糕的起点。用比喻的说法就是，你已经爬上这座大山的峰顶之一的斜坡上，还没有到达最高点。现在是收集争用统计数据的时候了，看看需要做哪些改进，以不同的方式切分状态和数据集，然后收集更多的统计数据，知道满足需求。如果你做了所有这些，你一定可以从峰顶看到美丽的风景。</p></blockquote><p>As promised, I’ve covered the four biggest performance problems in  server design.  There are still some important issues that any  particular server will need to address, though.  Mostly, these come down  to knowing your platform/environment:</p><ul><li>How does your storage subsystem perform with larger vs. smaller  requests?  With sequential vs. random?  How well do read-ahead and  write-behind work?</li><li>How efficient is the network protocol you’re using?  Are there  parameters or flags you can set to make it perform better?  Are there  facilities like TCP_CORK, MSG_PUSH, or the Nagle-toggling trick that you  can use to avoid tiny messages?</li><li>Does your system support scatter/gather I/O (e.g. readv/writev)?   Using these can improve performance and also take much of the pain out  of using buffer chains.</li><li>What’s your page size?  What’s your cache-line size?  Is it worth it  to align stuff on these boundaries?  How expensive are system calls or  context switches, relative to other things?</li><li>Are your reader/writer lock primitives subject to starvation?  Of  whom?  Do your events have “thundering herd” problems?  Does your  sleep/wakeup have the nasty (but very common) behavior that when X wakes  Y a context switch to Y happens immediately even if X still has things  to do?</li></ul><blockquote><p>如前所述，我已经介绍了服务器设计中的4个最大性能难题。尽管，对于任何一个特定服务器需要解决(设计问题)，仍有许多重要的议题。最重要的是，这些都取决你对于平台环境的了解：</p><ul><li>你的存储子系统在大请求以及小请求下的如何表现？是顺序请求还是随机请求？先读与后写如何工作得怎样？</li><li>你的网络协议效率怎样？有设置参数或者标记来使得性能更好么？有类似TCP_CORK，MSG_PUSH或者Nagle算法之类的设施来比喵小消息么？</li><li>你的系统是否支持类似readv/writev的分散/集中IO么？通过使用这些可以提高性能，而且可以从缓冲链中解脱出来。</li><li>页表多大？cache行块多大？是否值得边界对其？系统调用或者上下文切换对于其他操作的代价是多少？</li><li>读者/写者元语是否会导致饥饿？导致读饥饿还是写饥饿？事件驱动模型是否会有<a href="https://en.wikipedia.org/wiki/Thundering_herd_problem" target="_blank" rel="noopener">惊蛰问题</a>(注:超链接为译文所加)。当X唤醒Y时，是否是马上切换到Y，尽管X还有其他事情需要完成，休眠/唤醒元语是否会有脏数据行为（非常常见）。</li></ul></blockquote><p>I’m sure I could think of many more questions in this vein.  I’m sure  you could too.  In any particular situation it might not be worthwhile  to do anything about any one of these issues, but it’s usually worth at  least thinking about them.  If you don’t know the answers - many of  which you will not find in the system documentation - <em>find out</em>.   Write a test program or micro-benchmark to find the answers  empirically; writing such code is a useful skill in and of itself  anyway.  If you’re writing code to run on multiple platforms, many of  these questions correlate with points where you should probably be  abstracting functionality into per-platform libraries so you can realize  a performance gain on that one platform that supports a particular  feature.</p><blockquote><p>我相信我可以许多类似的问题，我认为你也可以。在任何特定的场景下，关于任何这些议题任意一个的处理可能都是不得当的，但是常常指的思考一下。如果你不知道答案，那么找到答案，因为从许多系统文档都找不到。写一个测试程序或者微基准测试程序，从经验上找答案；写这些代码本身就是非常有用的技能。如果你写多个平台下的代码，许多这些相关问题 应该被抽象到每一个系统库中，从而发现各个系统支持特定特性的性能提高。</p></blockquote><p>The “know the answers” theory applies to your own code, too.  Figure  out what the important high-level operations in your code are, and time  them under different conditions.  This is not quite the same as  traditional profiling; it’s about measuring <em>design</em> elements,  not actual implementations.  Low-level optimization is generally the  last resort of someone who screwed up the design.</p><blockquote><p>“知道答案”这一方法论，也可以应用到你自己的代码中。指出你代码中什么是重要高层操作，并在不同条件下计时。这不同于常规的性能分析；而是测试设计的技能要素，而非实际上的代码实现。低层次的优化通常是搞砸设计的那些人的最后一招。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> translation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> High-Performance </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deploy a blog with hexo</title>
      <link href="/2019/01/18/DeployBlogWithHexo/"/>
      <url>/2019/01/18/DeployBlogWithHexo/</url>
      
        <content type="html"><![CDATA[<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><table><thead><tr><th style="text-align:center">Date</th><th style="text-align:center">Version</th><th style="text-align:center">Comments</th></tr></thead><tbody><tr><td style="text-align:center">2019-01-18</td><td style="text-align:center">v 0.0.1</td><td style="text-align:center">Create the document</td></tr></tbody></table><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>The purpose of this document is to share some ideas that I have learn from the others about how to deploy a blog. More accurately, I will be writing about the history that how could I deploy this from zero to one. Here, I will not only try to illustrate the codes , but also show you all my configuration files and the references. I hope you could get involved well and do better than me.</p>]]></content>
      
      
      <categories>
          
          <category> history </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Commemorate My Grandpa</title>
      <link href="/2018/04/07/CommemorateMyGrandpa/"/>
      <url>/2018/04/07/CommemorateMyGrandpa/</url>
      
        <content type="html"><![CDATA[<h3 id="commemorate-my-grandpa"><a href="#commemorate-my-grandpa" class="headerlink" title="commemorate my grandpa"></a>commemorate my grandpa</h3><p>Recently, a lot of changes happened to me.</p><a id="more"></a><p><img src="/images/20180407/CommemorateMyGrandpa.jpg" alt="CommemorateMyGrandpa"></p>]]></content>
      
      
      <categories>
          
          <category> rumination </category>
          
      </categories>
      
      
        <tags>
            
            <tag> grandpa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Another Way To Generate A Prime Table</title>
      <link href="/2016/12/23/Another%20Way%20to%20Generate%20a%20PrimeTable/"/>
      <url>/2016/12/23/Another%20Way%20to%20Generate%20a%20PrimeTable/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CalculatePrimesUpTo</span><span class="params">(<span class="keyword">int</span> max)</span> </span>&#123;</span><br><span class="line">   ::<span class="built_in">std</span>::fill(is_prime_, is_prime_ + is_prime_size_, <span class="literal">true</span>);</span><br><span class="line">   is_prime_[<span class="number">0</span>] = is_prime_[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= max; i++) &#123;</span><br><span class="line">     <span class="keyword">if</span> (!is_prime_[i]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// Marks all multiples of i (except i itself) as non-prime.</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>*i; j &lt;= max; j += i) &#123;</span><br><span class="line">       is_prime_[j] = <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Illustrate ProtoBuf</title>
      <link href="/2016/03/16/IllustrateOfProtoBuf/"/>
      <url>/2016/03/16/IllustrateOfProtoBuf/</url>
      
        <content type="html"><![CDATA[<h2 id="Protobuf（google-protocol-buffer）"><a href="#Protobuf（google-protocol-buffer）" class="headerlink" title="Protobuf（google protocol buffer）"></a>Protobuf（google protocol buffer）</h2><h4 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h4><p>Google Protocol Buffer( 简称 Protobuf) 是 Google 公司内部的混合语言数据标准，目前已经正在使用的有超过 48,162 种报文格式定义和超过 12,183 个 .proto 文件。他们用于 RPC 系统和持续数据存储系统。<br>Protocol Buffers 是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，或者说序列化。它很适合做数据存储或 RPC 数据交换格式。可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。官方提供了<code>C++</code>、<code>Java</code>、<code>Python</code>、<code>go</code>、<code>c #</code> 五种语言的 API，因为开源所以其他语言也相继有了支持。<a href="https://github.com/google/protobuf/releases" target="_blank" rel="noopener">详情可查看</a>。</p><a id="more"></a><h4 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h4><p>环境：Ubuntu 15.04<br>直接下载安装包，解压后编译安装：<br>下载地址：<a href="https://github.com/google/protobuf/releases" target="_blank" rel="noopener">站点1</a>，或者<a href="https://developers.google.com/protocol-buffers/docs/downloads" target="_blank" rel="noopener">站点2</a><br>解压：<code>tar –xzvf protobuf-3.0.0-beta-3.tar.gz</code><br>安装依赖工具：<code>sudo apt-get install autoconf automake libtool curl make g++ unzip</code><br>编译安装[4]：<br><code>./autogen.sh</code><br><code>./configure</code><br><code>make check</code><br><code>sudo make install</code><br><code>sudo ldconfig # refresh shared library cache.</code></p><h4 id="三、例子程序"><a href="#三、例子程序" class="headerlink" title="三、例子程序"></a>三、例子程序</h4><h5 id="3-1-Google官方例子-1"><a href="#3-1-Google官方例子-1" class="headerlink" title="3.1 Google官方例子[1]"></a>3.1 Google官方例子[1]</h5><p>1 . 编写文件<code>addressbook.proto</code></p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//syntax = &quot;proto2&quot;;</span><br><span class="line"></span><br><span class="line">package tutorial;</span><br><span class="line"></span><br><span class="line">message Person &#123;</span><br><span class="line">required string name = 1;</span><br><span class="line">required int32 id = 2;</span><br><span class="line">optional string email = 3;</span><br><span class="line"></span><br><span class="line">enum PhoneType &#123;</span><br><span class="line">MOBILE = 0;</span><br><span class="line">HOME = 1;</span><br><span class="line">WORK = 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message PhoneNumber &#123;</span><br><span class="line">required string number = 1;</span><br><span class="line">optional PhoneType phone_type = 2 [default = HOME];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repeated PhoneNumber phone = 4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message AddressBook &#123;</span><br><span class="line">repeated Person person = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2 . 编译生成头文件和实现文件<br><code>protoc –I=./ --cpp_out=./ ./addressbook.proto</code></p><p>3 . 文件<code>writer.cc</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @file    writer.cc</span></span><br><span class="line"><span class="comment">  * @author  Home Jang(generalibm@gmail.com)</span></span><br><span class="line"><span class="comment">  * @date    2016-06-12 19:52:22</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"addressbook.pb.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PromptForAddress</span><span class="params">(tutorial::Person * person)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter person ID name :"</span>;</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; id;</span><br><span class="line">person-&gt;set_id(id);</span><br><span class="line"><span class="built_in">cin</span>.ignore(<span class="number">256</span>, <span class="string">'\n'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter name:"</span>;</span><br><span class="line">getline(<span class="built_in">cin</span> , *person-&gt;mutable_name());</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter email address (blank for none):"</span>;</span><br><span class="line"><span class="built_in">string</span> email;</span><br><span class="line">getline(<span class="built_in">cin</span>, email);</span><br><span class="line"><span class="keyword">if</span> (!email.empty()) &#123;</span><br><span class="line">person-&gt;set_email(email);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter a phone number (or leave a blank to finish):"</span>;</span><br><span class="line"><span class="built_in">string</span> number;</span><br><span class="line">getline(<span class="built_in">cin</span>, number);</span><br><span class="line"><span class="keyword">if</span> (number.empty()) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tutorial::Person::PhoneNumber * phone_number = person-&gt;add_phone();</span><br><span class="line">phone_number-&gt;set_number(number);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Is this a mobile, home or work phone?"</span>;</span><br><span class="line"><span class="built_in">string</span> type;</span><br><span class="line">getline(<span class="built_in">cin</span>, type);</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"mobile"</span> == type) &#123;</span><br><span class="line">phone_number-&gt;set_phone_type(tutorial::Person::MOBILE);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"home"</span> == type) &#123;</span><br><span class="line">phone_number-&gt;set_phone_type(tutorial::Person::HOME);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"work"</span> == type) &#123;</span><br><span class="line">phone_number-&gt;set_phone_type(tutorial::Person::WORK);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Unknow phone type."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;<span class="comment">// end else</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">// end while</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">GOOGLE_PROTOBUF_VERIFY_VERSION;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; <span class="string">"Usage :"</span> &lt;&lt; argv[<span class="number">0</span>] &lt;&lt; <span class="string">"ADDRESS_BOOK_FILE"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tutorial::AddressBook address_book;</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">fstream <span class="title">input</span><span class="params">(argv[<span class="number">1</span>], ios::in | ios::binary)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!input) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; argv[<span class="number">1</span>] &lt;&lt; <span class="string">":File not found. Creating a new file."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!address_book.ParseFromIstream(&amp;input)) &#123;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; <span class="string">"Failed to parse address book."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add an address.</span></span><br><span class="line">PromptForAddress(address_book.add_person()); </span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Write the new address book back to disk.</span></span><br><span class="line"><span class="function">fstream <span class="title">output</span><span class="params">(argv[<span class="number">1</span>], ios::out | ios::trunc | ios::binary)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!address_book.SerializeToOstream(&amp;output)) &#123;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; <span class="string">"Failed to write address book."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;<span class="comment">//end if</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Delete all global objects allocated by libprotobuf.</span></span><br><span class="line">google::protobuf::ShutdownProtobufLibrary();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4 . 文件<code>reader.cc</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @file    reader.cc</span></span><br><span class="line"><span class="comment">  * @author  Home Jang(generalibm@gmail.com)</span></span><br><span class="line"><span class="comment">  * @date    2016-06-13 00:26:43</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"addressbook.pb.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListPeople</span><span class="params">(<span class="keyword">const</span> tutorial::AddressBook &amp; address_book)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; address_book.person_size(); i++) &#123;</span><br><span class="line"><span class="keyword">const</span> tutorial::Person &amp; person = address_book.person(i);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" Person ID: "</span> &lt;&lt; person.id() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" Name : "</span> &lt;&lt; person.name() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (person.has_email()) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" Email : "</span> &lt;&lt; person.email() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; person.phone_size(); j++) &#123;</span><br><span class="line"><span class="keyword">const</span> tutorial::Person::PhoneNumber &amp; phone_number = person.phone(j);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (phone_number.phone_type()) &#123;</span><br><span class="line"><span class="keyword">case</span> tutorial::Person::MOBILE:</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" MOBILE : "</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> tutorial::Person::HOME:</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" HOME : "</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> tutorial::Person::WORK:</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" WORK : "</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; phone_number.number() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">// end for</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//::GOOGLE::PROTOBUF_VERIFY_VERSION;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; <span class="string">"Usage: "</span> &lt;&lt; argv[<span class="number">0</span>] &lt;&lt; <span class="string">" ADDRESS_BOOK_FILE"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">tutorial::AddressBook address_book;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="function">fstream <span class="title">input</span><span class="params">(argv[<span class="number">1</span>], ios::in | ios::binary)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!address_book.ParseFromIstream(&amp;input)) &#123;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; <span class="string">"Failed to parse address book."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ListPeople(address_book);</span><br><span class="line"></span><br><span class="line">google::protobuf::ShutdownProtobufLibrary();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5 . 编译<br><code>g++ -o writer writer.cc addressbook.pb.cc –lprotobuf</code><br><code>g++ -o reader reader.cc addressbook.pb.cc –lprotobuf</code><br>6 . 执行结果<br><code>./writer mid_file</code><br><code>$Enter person ID name :1001</code><br><code>$Enter name :Yun Ma</code><br><code>$Enter email address (blank for none):ali@ali.com</code><br><code>$Enter a phone number (or leave a blank to finish):17088888888</code><br><code>$Is this a mobile , home or work phone?work</code></p><p><code>./reader mid_file</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Person ID :1001</span><br><span class="line">Name : Yun MA</span><br><span class="line">Email : ali@ali.com</span><br><span class="line">WORK : work</span><br></pre></td></tr></table></figure></p><h5 id="3-2-DIY简单helloworld例子-3"><a href="#3-2-DIY简单helloworld例子-3" class="headerlink" title="3.2 DIY简单helloworld例子[3]"></a>3.2 DIY简单helloworld例子[3]</h5><p>1．编写<code>lm.helloworld.proto</code>文件</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;proto2&quot;;</span><br><span class="line"></span><br><span class="line">package lm;</span><br><span class="line"></span><br><span class="line">message helloworld &#123;</span><br><span class="line">required int32id = 1;</span><br><span class="line">required stringstr = 2;</span><br><span class="line">optional int32opt = 3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2．编译生成头文件及相应实现文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc -I=./ --cpp_out=./ ./lm.helloword.proto</span><br></pre></td></tr></table></figure></p><p>3．编写writer.cc<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @file    writer.cc</span></span><br><span class="line"><span class="comment">  * @author  Home Jang(generalibm@gmail.com)</span></span><br><span class="line"><span class="comment">  * @date    2016-06-13 16:04:02</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"lm.helloworld.pb.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cerr</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::fstream;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::ios;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lm::helloworld msg1;</span><br><span class="line">msg1.set_id(<span class="number">1001</span>);</span><br><span class="line">msg1.set_str(<span class="string">"google"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function">fstream <span class="title">output</span><span class="params">(<span class="string">"./log"</span>, ios::out | ios::trunc | ios::binary)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!msg1.SerializeToOstream(&amp;output)) &#123;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; <span class="string">"Failed to write msg."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4．编写reader.cc<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @file    reader.cc</span></span><br><span class="line"><span class="comment">  * @author  Home Jang(generalibm@gmail.com)</span></span><br><span class="line"><span class="comment">  * @date    2016-06-12 18:08:34</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"lm.helloworld.pb.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::fstream;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::ios;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cerr</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">listMsg</span><span class="params">(<span class="keyword">const</span> lm::helloworld &amp; msg)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"id = "</span> &lt;&lt; msg.id() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"str = "</span> &lt;&lt; msg.str() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lm::helloworld msg1;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function">fstream <span class="title">input</span><span class="params">(<span class="string">"./log"</span>, ios::in | ios::binary)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!msg1.ParseFromIstream(&amp;input)) &#123;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; <span class="string">"Failed to parse address book."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">listMsg(msg1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>5 .  编译执行<br><code>./writer</code><br><code>$cat log</code><br><code>$理google</code></p><p><code>./reader</code><br><code>$ id = 1001</code><br><code>$ str = google</code></p><h4 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h4><p>[1]<a href="https://developers.google.com/protocol-buffers/docs/cpptutorial#defining-your-protocol-format" target="_blank" rel="noopener">https://developers.google.com/protocol-buffers/docs/cpptutorial#defining-your-protocol-format</a><br>[2]<a href="https://github.com/google/protobuf/blob/master/src/README.md" target="_blank" rel="noopener">https://github.com/google/protobuf/blob/master/src/README.md</a><br>[3]<a href="http://www.ibm.com/developerworks/cn/linux/l-cn-gpb/" target="_blank" rel="noopener">http://www.ibm.com/developerworks/cn/linux/l-cn-gpb/</a></p>]]></content>
      
      
      <categories>
          
          <category> opensource </category>
          
      </categories>
      
      
        <tags>
            
            <tag> protobuf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The origins of English language</title>
      <link href="/2014/12/03/The%20Origins%20of%20the%20English%20Language/"/>
      <url>/2014/12/03/The%20Origins%20of%20the%20English%20Language/</url>
      
        <content type="html"><![CDATA[<h2 id="The-origins-of-the-English-language"><a href="#The-origins-of-the-English-language" class="headerlink" title="The origins of the English language"></a>The origins of the English language</h2><p>The life stories of individual words, often mazy and conjectural, need a fixed backdrop if they are to make sense.<a id="more"></a> So first, a little history. English is a member of the Indo-European family of languages. The precise origins of this are still a matter of some controversy, but the consensus view is that it came on the scene around 8,000 years ago in the general area to the north of the Black Sea. Since then it has split up into a large number of subgroups, which today provide nearly all the languages of Europe and have also spread over large areas of the Middle East and northern India. Among them are the Indo-Iranian languages, including Hindi and ancient Sanskrit; the Slavic languages – Russian, Polish, Czech, Serbo-Croat, and so on; the Baltic languages, Latvian and Lithuanian (which of all these modern languages most closely resembles its Indo-European ancestor); the Celtic languages, such as Welsh, Gaelic, and Breton; and Greek.But in the history of English, there are two particular groups that are of central importance. The first is the Romance languages: classical Latin, the literary language of ancient Rome; and French, Italian, Spanish, Portuguese, and Romanian, which evolved from Vulgar Latin, the language of the common people that spread through the Western Roman Empire. The role of Latin and French, in particular, in the growth of English vocabulary has been immense. We acquired a sizeable portion of our words from one or other of these sources.</p><p>The second important group, of course, is the Germanic languages: for that is the group to which English itself belongs. The existence of the Germanic peoples as a separate speech community dates back at least 3,000 years. Their first northern European home has been traced to an area around the river Elbe. At this time they all spoke the same language, which is generally known as Common Germanic.<br>Around the 2nd century BC this began to split up into three distinct dialects. One was East Germanic. The only East Germanic language of which any written evidence survives is Gothic. Now extinct, it was spoken by Germanic peoples who migrated back eastwards to the area of modern Bulgaria and the Crimea. It provides us with our closest glimpse of what prehistoric C common Germanic must have been like. The second was North Germanic, which has evolved into modern Swedish,Danish, Norwegian, and Icelandic. And lastly there was West Germanic, the ancestor of modern German, Dutch, Flemish, Frisian, and English.<br>The forerunners of English crossed the Channel in the 5th and 6th centuries AD.</p><p>They were brought by peoples from the northeastern corner of the European mainland, around Jutland and southern Denmark – the Angles, Saxons, and Jutes.They spoke a mutually intelligible set of Germanic dialects (whose closest modern continental relative is Frisian), which formed the basis of what is now known as Old English (the alternative term ‘Anglo-Saxon’ is no longer much used). This was a more or less homogeneous language, but with marked geographical differences reflecting the areas into which the various Germanic peoples had moved: the Angles into the Midlands (where Mercian was spoken)and the North (whose form of Old English is now called Northumbrian); the Jutes into Kent; and the Saxons into the rest of southern and western England (their speech is known as West Saxon).</p>]]></content>
      
      
      <categories>
          
          <category> translation </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>about me</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<p>Hong ZHANG</p><h3 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h3><p><code>C++</code> developer </p><h3 id="Personal-skills"><a href="#Personal-skills" class="headerlink" title="Personal skills"></a>Personal skills</h3><ul><li>Familiar with the basic <strong>data structures and algorithms</strong>, familiar with <strong>STL</strong>.</li><li>Familiar with <code>C/C++/Qt</code> development in <em>Linux/windows</em>, familiar with <strong>vim/gcc/gdb/vs/eclipse</strong>.</li><li>Familiar with <strong>Object-Oriented</strong> and <strong>Object-Based</strong> programming, familiar with common <strong>design pattern</strong>.</li><li>Familiar UML, be able to write <strong>design, implementation and test docs</strong>.</li><li>Familiar with <strong>multiple-thread</strong> and <strong>network programming</strong>, know <em>libevent</em> and <em>muduo</em> network kit.</li><li>Familiar with <code>shell</code>, know <code>Perl/Python</code>.</li></ul><h3 id="Self-assessment"><a href="#Self-assessment" class="headerlink" title="Self-assessment"></a>Self-assessment</h3><p>Love life, love techs; prefer independent thinking and be willing to share.</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
