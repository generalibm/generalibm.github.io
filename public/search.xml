<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Deploy a blog with hexo</title>
      <link href="/2019/01/18/Deploy-a-blog-with-hexo/"/>
      <url>/2019/01/18/Deploy-a-blog-with-hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><table><thead><tr><th style="text-align:center">Date</th><th style="text-align:center">Version</th><th style="text-align:center">Comments</th></tr></thead><tbody><tr><td style="text-align:center">2019-01-18</td><td style="text-align:center">v 0.0.1</td><td style="text-align:center">Create the document</td></tr></tbody></table><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>The purpose of this document is to share some ideas that I have learn from the others about how to deploy a blog. More accurately, I will be writing about the history that how could I deploy this from zero to one. Here, I will not only try to illustrate the codes , but also show you all my configuration files and the references. I hope you could get involved well and do better than me.</p>]]></content>
      
      
      <categories>
          
          <category> history </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>May You Two Setup a Happy Family</title>
      <link href="/2019/01/12/MayYouTwoSepupAHappyFamily/"/>
      <url>/2019/01/12/MayYouTwoSepupAHappyFamily/</url>
      
        <content type="html"><![CDATA[<p>三年不见韩公子</p><p>今往事</p><p>几番风味</p><p>好景最佳人</p><p>一曲江湖水<br><a id="more"></a></p><p>两家灯火赤峰市</p><p>记当日</p><p>相逢笑指</p><p>把酒话清尊</p><p>为我殷勤意</p>]]></content>
      
      
      <categories>
          
          <category> rumination </category>
          
      </categories>
      
      
        <tags>
            
            <tag> happy family </tag>
            
            <tag> poem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>New Year of 2019</title>
      <link href="/2019/01/01/New-Year-of-2019/"/>
      <url>/2019/01/01/New-Year-of-2019/</url>
      
        <content type="html"><![CDATA[<h3 id="Xi’an"><a href="#Xi’an" class="headerlink" title="Xi’an"></a>Xi’an</h3><a id="more"></a><p><img src="/images/20190101/Xian.jpg" alt="Xian"></p><h3 id="Qujiang"><a href="#Qujiang" class="headerlink" title="Qujiang"></a>Qujiang</h3><p><img src="/images/20190101/Qujiang.jpg" alt="Qujiang"></p><h3 id="MountHua"><a href="#MountHua" class="headerlink" title="MountHua"></a>MountHua</h3><p><img src="/images/20190101/Mounthua.jpg" alt="MountHua"></p>]]></content>
      
      
      <categories>
          
          <category> rumination </category>
          
      </categories>
      
      
        <tags>
            
            <tag> New Year&#39;s Eve </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Commemorate My Grandpa</title>
      <link href="/2018/04/07/Commemorate-My-Grandpa/"/>
      <url>/2018/04/07/Commemorate-My-Grandpa/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><img src="/images/20180407/CommemorateMyGrandpa.jpg" alt="CommemorateMyGrandpa"></p>]]></content>
      
      
      <categories>
          
          <category> rumination </category>
          
      </categories>
      
      
        <tags>
            
            <tag> commemorate </tag>
            
            <tag> grandpa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Another Way To Generate A Prime Table</title>
      <link href="/2016/12/23/AnotherWayToGenerateAPrimeTable/"/>
      <url>/2016/12/23/AnotherWayToGenerateAPrimeTable/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CalculatePrimesUpTo</span><span class="params">(<span class="keyword">int</span> max)</span> </span>&#123;</span><br><span class="line">   ::<span class="built_in">std</span>::fill(is_prime_, is_prime_ + is_prime_size_, <span class="literal">true</span>);</span><br><span class="line">   is_prime_[<span class="number">0</span>] = is_prime_[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= max; i++) &#123;</span><br><span class="line">     <span class="keyword">if</span> (!is_prime_[i]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// Marks all multiples of i (except i itself) as non-prime.</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>*i; j &lt;= max; j += i) &#123;</span><br><span class="line">       is_prime_[j] = <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Illustrate ProtoBuf</title>
      <link href="/2016/03/16/IllustrateOfProtoBuf/"/>
      <url>/2016/03/16/IllustrateOfProtoBuf/</url>
      
        <content type="html"><![CDATA[<h2 id="Protobuf（google-protocol-buffer）"><a href="#Protobuf（google-protocol-buffer）" class="headerlink" title="Protobuf（google protocol buffer）"></a>Protobuf（google protocol buffer）</h2><h4 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h4><p>Google Protocol Buffer( 简称 Protobuf) 是 Google 公司内部的混合语言数据标准，目前已经正在使用的有超过 48,162 种报文格式定义和超过 12,183 个 .proto 文件。他们用于 RPC 系统和持续数据存储系统。<br>Protocol Buffers 是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，或者说序列化。它很适合做数据存储或 RPC 数据交换格式。可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。官方提供了<code>C++</code>、<code>Java</code>、<code>Python</code>、<code>go</code>、<code>c #</code> 五种语言的 API，因为开源所以其他语言也相继有了支持。<a href="https://github.com/google/protobuf/releases" target="_blank" rel="noopener">详情可查看</a>。</p><a id="more"></a><h4 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h4><p>环境：Ubuntu 15.04<br>直接下载安装包，解压后编译安装：<br>下载地址：<a href="https://github.com/google/protobuf/releases" target="_blank" rel="noopener">站点1</a>，或者<a href="https://developers.google.com/protocol-buffers/docs/downloads" target="_blank" rel="noopener">站点2</a><br>解压：<code>tar –xzvf protobuf-3.0.0-beta-3.tar.gz</code><br>安装依赖工具：<code>sudo apt-get install autoconf automake libtool curl make g++ unzip</code><br>编译安装[4]：<br><code>./autogen.sh</code><br><code>./configure</code><br><code>make check</code><br><code>sudo make install</code><br><code>sudo ldconfig # refresh shared library cache.</code></p><h4 id="三、例子程序"><a href="#三、例子程序" class="headerlink" title="三、例子程序"></a>三、例子程序</h4><h5 id="3-1-Google官方例子-1"><a href="#3-1-Google官方例子-1" class="headerlink" title="3.1 Google官方例子[1]"></a>3.1 Google官方例子[1]</h5><p>1 . 编写文件<code>addressbook.proto</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//syntax = &quot;proto2&quot;;</span><br><span class="line"></span><br><span class="line">package tutorial;</span><br><span class="line"></span><br><span class="line">message Person &#123;</span><br><span class="line">required string name = 1;</span><br><span class="line">required int32 id = 2;</span><br><span class="line">optional string email = 3;</span><br><span class="line"></span><br><span class="line">enum PhoneType &#123;</span><br><span class="line">MOBILE = 0;</span><br><span class="line">HOME = 1;</span><br><span class="line">WORK = 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message PhoneNumber &#123;</span><br><span class="line">required string number = 1;</span><br><span class="line">optional PhoneType phone_type = 2 [default = HOME];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repeated PhoneNumber phone = 4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message AddressBook &#123;</span><br><span class="line">repeated Person person = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2 . 编译生成头文件和实现文件<br><code>protoc –I=./ --cpp_out=./ ./addressbook.proto</code></p><p>3 . 文件<code>writer.cc</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @file    writer.cc</span></span><br><span class="line"><span class="comment">  * @author  Home Jang(generalibm@gmail.com)</span></span><br><span class="line"><span class="comment">  * @date    2016-06-12 19:52:22</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"addressbook.pb.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PromptForAddress</span><span class="params">(tutorial::Person * person)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter person ID name :"</span>;</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; id;</span><br><span class="line">person-&gt;set_id(id);</span><br><span class="line"><span class="built_in">cin</span>.ignore(<span class="number">256</span>, <span class="string">'\n'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter name:"</span>;</span><br><span class="line">getline(<span class="built_in">cin</span> , *person-&gt;mutable_name());</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter email address (blank for none):"</span>;</span><br><span class="line"><span class="built_in">string</span> email;</span><br><span class="line">getline(<span class="built_in">cin</span>, email);</span><br><span class="line"><span class="keyword">if</span> (!email.empty()) &#123;</span><br><span class="line">person-&gt;set_email(email);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter a phone number (or leave a blank to finish):"</span>;</span><br><span class="line"><span class="built_in">string</span> number;</span><br><span class="line">getline(<span class="built_in">cin</span>, number);</span><br><span class="line"><span class="keyword">if</span> (number.empty()) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tutorial::Person::PhoneNumber * phone_number = person-&gt;add_phone();</span><br><span class="line">phone_number-&gt;set_number(number);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Is this a mobile, home or work phone?"</span>;</span><br><span class="line"><span class="built_in">string</span> type;</span><br><span class="line">getline(<span class="built_in">cin</span>, type);</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"mobile"</span> == type) &#123;</span><br><span class="line">phone_number-&gt;set_phone_type(tutorial::Person::MOBILE);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"home"</span> == type) &#123;</span><br><span class="line">phone_number-&gt;set_phone_type(tutorial::Person::HOME);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"work"</span> == type) &#123;</span><br><span class="line">phone_number-&gt;set_phone_type(tutorial::Person::WORK);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Unknow phone type."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;<span class="comment">// end else</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">// end while</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">GOOGLE_PROTOBUF_VERIFY_VERSION;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; <span class="string">"Usage :"</span> &lt;&lt; argv[<span class="number">0</span>] &lt;&lt; <span class="string">"ADDRESS_BOOK_FILE"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tutorial::AddressBook address_book;</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">fstream <span class="title">input</span><span class="params">(argv[<span class="number">1</span>], ios::in | ios::binary)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!input) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; argv[<span class="number">1</span>] &lt;&lt; <span class="string">":File not found. Creating a new file."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!address_book.ParseFromIstream(&amp;input)) &#123;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; <span class="string">"Failed to parse address book."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add an address.</span></span><br><span class="line">PromptForAddress(address_book.add_person()); </span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Write the new address book back to disk.</span></span><br><span class="line"><span class="function">fstream <span class="title">output</span><span class="params">(argv[<span class="number">1</span>], ios::out | ios::trunc | ios::binary)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!address_book.SerializeToOstream(&amp;output)) &#123;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; <span class="string">"Failed to write address book."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;<span class="comment">//end if</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Delete all global objects allocated by libprotobuf.</span></span><br><span class="line">google::protobuf::ShutdownProtobufLibrary();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4 . 文件<code>reader.cc</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @file    reader.cc</span></span><br><span class="line"><span class="comment">  * @author  Home Jang(generalibm@gmail.com)</span></span><br><span class="line"><span class="comment">  * @date    2016-06-13 00:26:43</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"addressbook.pb.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListPeople</span><span class="params">(<span class="keyword">const</span> tutorial::AddressBook &amp; address_book)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; address_book.person_size(); i++) &#123;</span><br><span class="line"><span class="keyword">const</span> tutorial::Person &amp; person = address_book.person(i);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" Person ID: "</span> &lt;&lt; person.id() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" Name : "</span> &lt;&lt; person.name() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (person.has_email()) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" Email : "</span> &lt;&lt; person.email() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; person.phone_size(); j++) &#123;</span><br><span class="line"><span class="keyword">const</span> tutorial::Person::PhoneNumber &amp; phone_number = person.phone(j);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (phone_number.phone_type()) &#123;</span><br><span class="line"><span class="keyword">case</span> tutorial::Person::MOBILE:</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" MOBILE : "</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> tutorial::Person::HOME:</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" HOME : "</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> tutorial::Person::WORK:</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" WORK : "</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; phone_number.number() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">// end for</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//::GOOGLE::PROTOBUF_VERIFY_VERSION;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; <span class="string">"Usage: "</span> &lt;&lt; argv[<span class="number">0</span>] &lt;&lt; <span class="string">" ADDRESS_BOOK_FILE"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">tutorial::AddressBook address_book;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="function">fstream <span class="title">input</span><span class="params">(argv[<span class="number">1</span>], ios::in | ios::binary)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!address_book.ParseFromIstream(&amp;input)) &#123;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; <span class="string">"Failed to parse address book."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ListPeople(address_book);</span><br><span class="line"></span><br><span class="line">google::protobuf::ShutdownProtobufLibrary();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5 . 编译<br><code>g++ -o writer writer.cc addressbook.pb.cc –lprotobuf</code><br><code>g++ -o reader reader.cc addressbook.pb.cc –lprotobuf</code><br>6 . 执行结果<br><code>./writer mid_file</code><br><code>$Enter person ID name :1001</code><br><code>$Enter name :Yun Ma</code><br><code>$Enter email address (blank for none):ali@ali.com</code><br><code>$Enter a phone number (or leave a blank to finish):17088888888</code><br><code>$Is this a mobile , home or work phone?work</code></p><p><code>./reader mid_file</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Person ID :1001</span><br><span class="line">Name : Yun MA</span><br><span class="line">Email : ali@ali.com</span><br><span class="line">WORK : work</span><br></pre></td></tr></table></figure></p><h5 id="3-2-DIY简单helloworld例子-3"><a href="#3-2-DIY简单helloworld例子-3" class="headerlink" title="3.2 DIY简单helloworld例子[3]"></a>3.2 DIY简单helloworld例子[3]</h5><p>1．编写<code>lm.helloworld.proto</code>文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;proto2&quot;;</span><br><span class="line"></span><br><span class="line">package lm;</span><br><span class="line"></span><br><span class="line">message helloworld &#123;</span><br><span class="line">required int32id = 1;</span><br><span class="line">required stringstr = 2;</span><br><span class="line">optional int32opt = 3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2．编译生成头文件及相应实现文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc -I=./ --cpp_out=./ ./lm.helloword.proto</span><br></pre></td></tr></table></figure></p><p>3．编写writer.cc<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> /**</span><br><span class="line">  * @file    writer.cc</span><br><span class="line">  * @author  Home Jang(generalibm@gmail.com)</span><br><span class="line">  * @date    2016-06-13 16:04:02</span><br><span class="line">  */</span><br><span class="line"></span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;fstream&gt;</span><br><span class="line"></span><br><span class="line">#include &quot;lm.helloworld.pb.h&quot;</span><br><span class="line"></span><br><span class="line">using std::cout;</span><br><span class="line">using std::cerr;</span><br><span class="line">using std::endl;</span><br><span class="line">using std::fstream;</span><br><span class="line">using std::ios;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">lm::helloworld msg1;</span><br><span class="line">msg1.set_id(1001);</span><br><span class="line">msg1.set_str(&quot;google&quot;);</span><br><span class="line"></span><br><span class="line">fstream output(&quot;./log&quot;, ios::out | ios::trunc | ios::binary);</span><br><span class="line"></span><br><span class="line">if (!msg1.SerializeToOstream(&amp;output)) &#123;</span><br><span class="line">cerr &lt;&lt; &quot;Failed to write msg.&quot; &lt;&lt; endl;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4．编写reader.cc<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> /**</span><br><span class="line">  * @file    reader.cc</span><br><span class="line">  * @author  Home Jang(generalibm@gmail.com)</span><br><span class="line">  * @date    2016-06-12 18:08:34</span><br><span class="line">  */</span><br><span class="line"></span><br><span class="line">#include &quot;lm.helloworld.pb.h&quot;</span><br><span class="line"></span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;fstream&gt;</span><br><span class="line"></span><br><span class="line">using std::cout;</span><br><span class="line">using std::endl;</span><br><span class="line">using std::fstream;</span><br><span class="line">using std::ios;</span><br><span class="line">using std::cerr;</span><br><span class="line"></span><br><span class="line">void listMsg(const lm::helloworld &amp; msg) &#123;</span><br><span class="line">cout &lt;&lt; &quot;id = &quot; &lt;&lt; msg.id() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;str = &quot; &lt;&lt; msg.str() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">lm::helloworld msg1;</span><br><span class="line">#if 1</span><br><span class="line">&#123;</span><br><span class="line">fstream input(&quot;./log&quot;, ios::in | ios::binary);</span><br><span class="line">if (!msg1.ParseFromIstream(&amp;input)) &#123;</span><br><span class="line">cerr &lt;&lt; &quot;Failed to parse address book.&quot; &lt;&lt; endl;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br><span class="line">listMsg(msg1);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>5 .  编译执行<br><code>./writer</code><br><code>$cat log</code><br><code>$理google</code></p><p><code>./reader</code><br><code>$ id = 1001</code><br><code>$ str = google</code></p><h4 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h4><p>[1]<a href="https://developers.google.com/protocol-buffers/docs/cpptutorial#defining-your-protocol-format" target="_blank" rel="noopener">https://developers.google.com/protocol-buffers/docs/cpptutorial#defining-your-protocol-format</a><br>[2]<a href="https://github.com/google/protobuf/blob/master/src/README.md" target="_blank" rel="noopener">https://github.com/google/protobuf/blob/master/src/README.md</a><br>[3]<a href="http://www.ibm.com/developerworks/cn/linux/l-cn-gpb/" target="_blank" rel="noopener">http://www.ibm.com/developerworks/cn/linux/l-cn-gpb/</a></p>]]></content>
      
      
      <categories>
          
          <category> opensource </category>
          
      </categories>
      
      
        <tags>
            
            <tag> protobuf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The origins of English language</title>
      <link href="/2014/12/03/The-origins-of-the-English-language/"/>
      <url>/2014/12/03/The-origins-of-the-English-language/</url>
      
        <content type="html"><![CDATA[<h2 id="The-origins-of-the-English-language"><a href="#The-origins-of-the-English-language" class="headerlink" title="The origins of the English language"></a>The origins of the English language</h2><p>The life stories of individual words, often mazy and conjectural, need a fixed backdrop if they are to make sense. So first, a little history. English is a member of the Indo-European family of languages. The precise origins of this are still a matter of some controversy, but the consensus view is that it came on the scene around 8,000 years ago in the general area to the north of the Black Sea. Since then it has split up into a large number of subgroups, which today provide nearly all the languages of Europe and have also spread over large areas of the Middle East and northern India. Among them are the Indo-Iranian languages, including Hindi and ancient Sanskrit; the Slavic languages – Russian, Polish, Czech, Serbo-Croat, and so on; the Baltic languages, Latvian and Lithuanian (which of all these modern languages most closely resembles its Indo-European ancestor); the Celtic languages, such as Welsh, Gaelic, and Breton; and Greek.But in the history of English, there are two particular groups that are of central importance. The first is the Romance languages: classical Latin, the literary language of ancient Rome; and French, Italian, Spanish, Portuguese, and Romanian, which evolved from Vulgar Latin, the language of the common people that spread through the Western Roman Empire. The role of Latin and French, in particular, in the growth of English vocabulary has been immense. We acquired a sizeable portion of our words from one or other of these sources.</p><p>The second important group, of course, is the Germanic languages: for that is the group to which English itself belongs. The existence of the Germanic peoples as a separate speech community dates back at least 3,000 years. Their first northern European home has been traced to an area around the river Elbe. At this time they all spoke the same language, which is generally known as Common Germanic.<br>Around the 2nd century BC this began to split up into three distinct dialects. One was East Germanic. The only East Germanic language of which any written evidence survives is Gothic. Now extinct, it was spoken by Germanic peoples who migrated back eastwards to the area of modern Bulgaria and the Crimea. It provides us with our closest glimpse of what prehistoric C common Germanic must have been like. The second was North Germanic, which has evolved into modern Swedish,Danish, Norwegian, and Icelandic. And lastly there was West Germanic, the ancestor of modern German, Dutch, Flemish, Frisian, and English.<br>The forerunners of English crossed the Channel in the 5th and 6th centuries AD.</p><p>They were brought by peoples from the northeastern corner of the European mainland, around Jutland and southern Denmark – the Angles, Saxons, and Jutes.They spoke a mutually intelligible set of Germanic dialects (whose closest modern continental relative is Frisian), which formed the basis of what is now known as Old English (the alternative term ‘Anglo-Saxon’ is no longer much used). This was a more or less homogeneous language, but with marked geographical differences reflecting the areas into which the various Germanic peoples had moved: the Angles into the Midlands (where Mercian was spoken)and the North (whose form of Old English is now called Northumbrian); the Jutes into Kent; and the Saxons into the rest of southern and western England (their speech is known as West Saxon).</p>]]></content>
      
      
      <categories>
          
          <category> translation </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
